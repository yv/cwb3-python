/* Generated by Cython 0.12.1 on Mon May 21 17:57:16 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyUnicode_Type
  #define PyString_CheckExact          PyUnicode_CheckExact
#else
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_CheckExact           PyString_CheckExact
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)

#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__CWB__CL
#include "stdlib.h"
#include "string.h"
#include "cl_cpp.h"

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #else
    #define CYTHON_INLINE 
  #endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBytes_FromUString(s)      __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)        ((unsigned char*) __Pyx_PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif


#if !defined(T_ULONGLONG)
#define __Pyx_T_UNSIGNED_INT(x) \
        ((sizeof(x) == sizeof(unsigned char))  ? T_UBYTE : \
        ((sizeof(x) == sizeof(unsigned short)) ? T_USHORT : \
        ((sizeof(x) == sizeof(unsigned int))   ? T_UINT : \
        ((sizeof(x) == sizeof(unsigned long))  ? T_ULONG : -1))))
#else
#define __Pyx_T_UNSIGNED_INT(x) \
        ((sizeof(x) == sizeof(unsigned char))  ? T_UBYTE : \
        ((sizeof(x) == sizeof(unsigned short)) ? T_USHORT : \
        ((sizeof(x) == sizeof(unsigned int))   ? T_UINT : \
        ((sizeof(x) == sizeof(unsigned long))  ? T_ULONG : \
        ((sizeof(x) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))))
#endif
#if !defined(T_LONGLONG)
#define __Pyx_T_SIGNED_INT(x) \
        ((sizeof(x) == sizeof(char))  ? T_BYTE : \
        ((sizeof(x) == sizeof(short)) ? T_SHORT : \
        ((sizeof(x) == sizeof(int))   ? T_INT : \
        ((sizeof(x) == sizeof(long))  ? T_LONG : -1))))
#else
#define __Pyx_T_SIGNED_INT(x) \
        ((sizeof(x) == sizeof(char))  ? T_BYTE : \
        ((sizeof(x) == sizeof(short)) ? T_SHORT : \
        ((sizeof(x) == sizeof(int))   ? T_INT : \
        ((sizeof(x) == sizeof(long))  ? T_LONG : \
        ((sizeof(x) == sizeof(PY_LONG_LONG))   ? T_LONGLONG : -1)))))
#endif

#define __Pyx_T_FLOATING(x) \
        ((sizeof(x) == sizeof(float)) ? T_FLOAT : \
        ((sizeof(x) == sizeof(double)) ? T_DOUBLE : -1))

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;


/* Type declarations */

/* "src/CWB/CL.pxd":58
 * cdef class AlignAttrib
 * 
 * cdef class Corpus:             # <<<<<<<<<<<<<<
 *   cdef c_Corpus *corpus
 *   cdef object name
 */

struct __pyx_obj_3CWB_2CL_Corpus {
  PyObject_HEAD
  struct __pyx_vtabstruct_3CWB_2CL_Corpus *__pyx_vtab;
  struct TCorpus *corpus;
  PyObject *name;
  PyObject *charset_decoder;
  PyObject *charset_encoder;
};

/* "src/CWB/CL.pxd":54
 *   int get_bounds_of_nth_struc(c_Attribute *attribute, int struc_num, int *s_start, int *s_end)
 * 
 * cdef class PosAttrib             # <<<<<<<<<<<<<<
 * cdef class AttStruc
 * cdef class AlignAttrib
 */

struct __pyx_obj_3CWB_2CL_PosAttrib {
  PyObject_HEAD
  struct __pyx_vtabstruct_3CWB_2CL_PosAttrib *__pyx_vtab;
  union _Attribute *att;
  struct __pyx_obj_3CWB_2CL_Corpus *parent;
  PyObject *attname;
};

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":190
 *       free(self.ids)
 * 
 * cdef class AttrDictionary             # <<<<<<<<<<<<<<
 * 
 * cdef class PosAttrib:
 */

struct __pyx_obj_3CWB_2CL_AttrDictionary {
  PyObject_HEAD
  struct __pyx_obj_3CWB_2CL_PosAttrib *attr;
};

/* "src/CWB/CL.pxd":56
 * cdef class PosAttrib
 * cdef class AttStruc
 * cdef class AlignAttrib             # <<<<<<<<<<<<<<
 * 
 * cdef class Corpus:
 */

struct __pyx_obj_3CWB_2CL_AlignAttrib {
  PyObject_HEAD
  union _Attribute *att;
  int has_values;
  struct __pyx_obj_3CWB_2CL_Corpus *parent;
  PyObject *attname;
};

/* "src/CWB/CL.pxd":66
 *   cpdef unicode to_unicode(self, s)
 * 
 * cdef class IDList:             # <<<<<<<<<<<<<<
 *   cdef int *ids
 *   cdef int length
 */

struct __pyx_obj_3CWB_2CL_IDList {
  PyObject_HEAD
  struct __pyx_vtabstruct_3CWB_2CL_IDList *__pyx_vtab;
  int *ids;
  int length;
};

/* "src/CWB/CL.pxd":55
 * 
 * cdef class PosAttrib
 * cdef class AttStruc             # <<<<<<<<<<<<<<
 * cdef class AlignAttrib
 * 
 */

struct __pyx_obj_3CWB_2CL_AttStruc {
  PyObject_HEAD
  union _Attribute *att;
  int has_values;
  struct __pyx_obj_3CWB_2CL_Corpus *parent;
  PyObject *attname;
};


/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":48
 *       return AlignAttrib(self,name)
 * 
 * cdef class IDList:             # <<<<<<<<<<<<<<
 *   def __cinit__(self, seq=None):
 *     cdef int i, old_val, is_sorted
 */

struct __pyx_vtabstruct_3CWB_2CL_IDList {
  struct __pyx_obj_3CWB_2CL_IDList *(*join)(struct __pyx_obj_3CWB_2CL_IDList *, struct __pyx_obj_3CWB_2CL_IDList *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3CWB_2CL_IDList *__pyx_vtabptr_3CWB_2CL_IDList;


/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":14
 * # list_corpora => gives a list of all corpora
 * 
 * cdef class Corpus:             # <<<<<<<<<<<<<<
 *   def __cinit__(self, cname, encoding='ISO-8859-15', registry_dir=None):
 *     if registry_dir is None:
 */

struct __pyx_vtabstruct_3CWB_2CL_Corpus {
  PyObject *(*to_str)(struct __pyx_obj_3CWB_2CL_Corpus *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*to_unicode)(struct __pyx_obj_3CWB_2CL_Corpus *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3CWB_2CL_Corpus *__pyx_vtabptr_3CWB_2CL_Corpus;


/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":192
 * cdef class AttrDictionary
 * 
 * cdef class PosAttrib:             # <<<<<<<<<<<<<<
 *   def __repr__(self):
 *     return "cwb.Attribute(%s,'%s')"%(self.parent,self.attname)
 */

struct __pyx_vtabstruct_3CWB_2CL_PosAttrib {
  PyObject *(*cpos2id)(struct __pyx_obj_3CWB_2CL_PosAttrib *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3CWB_2CL_PosAttrib *__pyx_vtabptr_3CWB_2CL_PosAttrib;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_Print(PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from CWB.CL */

static PyTypeObject *__pyx_ptype_3CWB_2CL_PosAttrib = 0;
static PyTypeObject *__pyx_ptype_3CWB_2CL_AttStruc = 0;
static PyTypeObject *__pyx_ptype_3CWB_2CL_AlignAttrib = 0;
static PyTypeObject *__pyx_ptype_3CWB_2CL_Corpus = 0;
static PyTypeObject *__pyx_ptype_3CWB_2CL_IDList = 0;
static PyTypeObject *__pyx_ptype_3CWB_2CL_AttrDictionary = 0;
DL_EXPORT(PyObject) *registry = 0;
#define __Pyx_MODULE_NAME "CWB.CL"
int __pyx_module_is_main_CWB__CL = 0;

/* Implementation of CWB.CL */
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static char __pyx_k_1[] = "ISO-8859-15";
static char __pyx_k_2[] = "cwb.CL.Corpus('%s')";
static char __pyx_k_3[] = "cwb.Attribute(%s,'%s')";
static char __pyx_k_4[] = "P-attribute offset out of bounds";
static char __pyx_k_5[] = "CWB.CL.AttrStruct(%s,'%s')";
static char __pyx_k_6[] = "no structure at this position";
static char __pyx_k_7[] = "CWB.CL.AlignAttrib(%s,'%s')";
static char __pyx_k_8[] = "no alignment at this position";
static char __pyx_k_9[] = "/usr/local/share/cwb/registry/";
static char __pyx_k__a[] = "a";
static char __pyx_k__d[] = "d";
static char __pyx_k__p[] = "p";
static char __pyx_k__s[] = "s";
static char __pyx_k__add[] = "add";
static char __pyx_k__att[] = "att";
static char __pyx_k__ids[] = "ids";
static char __pyx_k__pat[] = "pat";
static char __pyx_k__seq[] = "seq";
static char __pyx_k__attr[] = "attr";
static char __pyx_k__find[] = "find";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__stop[] = "stop";
static char __pyx_k__word[] = "word";
static char __pyx_k__FEMME[] = "FEMME";
static char __pyx_k__atype[] = "atype";
static char __pyx_k__cname[] = "cname";
static char __pyx_k__femme[] = "femme";
static char __pyx_k__flags[] = "flags";
static char __pyx_k__other[] = "other";
static char __pyx_k__start[] = "start";
static char __pyx_k__codecs[] = "codecs";
static char __pyx_k__corpus[] = "corpus";
static char __pyx_k__length[] = "length";
static char __pyx_k__offset[] = "offset";
static char __pyx_k__parent[] = "parent";
static char __pyx_k__sorted[] = "sorted";
static char __pyx_k__to_str[] = "to_str";
static char __pyx_k__attname[] = "attname";
static char __pyx_k__cpos2id[] = "cpos2id";
static char __pyx_k__KeyError[] = "KeyError";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k__encoding[] = "encoding";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__IndexError[] = "IndexError";
static char __pyx_k__getdecoder[] = "getdecoder";
static char __pyx_k__getencoder[] = "getencoder";
static char __pyx_k__has_values[] = "has_values";
static char __pyx_k__to_unicode[] = "to_unicode";
static char __pyx_k__get_matching[] = "get_matching";
static char __pyx_k__registry_dir[] = "registry_dir";
static char __pyx_k__charset_decoder[] = "charset_decoder";
static char __pyx_k__charset_encoder[] = "charset_encoder";
static char __pyx_k__get_P_attributes[] = "get_P_attributes";
static char __pyx_k__get_S_attributes[] = "get_S_attributes";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__FEMME;
static PyObject *__pyx_n_s__IndexError;
static PyObject *__pyx_n_s__KeyError;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__att;
static PyObject *__pyx_n_s__attname;
static PyObject *__pyx_n_s__attr;
static PyObject *__pyx_n_s__atype;
static PyObject *__pyx_n_s__charset_decoder;
static PyObject *__pyx_n_s__charset_encoder;
static PyObject *__pyx_n_s__cname;
static PyObject *__pyx_n_s__codecs;
static PyObject *__pyx_n_s__corpus;
static PyObject *__pyx_n_s__cpos2id;
static PyObject *__pyx_n_s__d;
static PyObject *__pyx_n_s__encoding;
static PyObject *__pyx_n_s__femme;
static PyObject *__pyx_n_s__find;
static PyObject *__pyx_n_s__flags;
static PyObject *__pyx_n_s__get_P_attributes;
static PyObject *__pyx_n_s__get_S_attributes;
static PyObject *__pyx_n_s__get_matching;
static PyObject *__pyx_n_s__getdecoder;
static PyObject *__pyx_n_s__getencoder;
static PyObject *__pyx_n_s__has_values;
static PyObject *__pyx_n_s__ids;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__length;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__offset;
static PyObject *__pyx_n_s__other;
static PyObject *__pyx_n_s__p;
static PyObject *__pyx_n_s__parent;
static PyObject *__pyx_n_s__pat;
static PyObject *__pyx_n_s__registry_dir;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__seq;
static PyObject *__pyx_n_s__sorted;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__stop;
static PyObject *__pyx_n_s__to_str;
static PyObject *__pyx_n_s__to_unicode;
static PyObject *__pyx_n_s__word;
static PyObject *__pyx_int_0;

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":15
 * 
 * cdef class Corpus:
 *   def __cinit__(self, cname, encoding='ISO-8859-15', registry_dir=None):             # <<<<<<<<<<<<<<
 *     if registry_dir is None:
 *       registry_dir=registry
 */

static int __pyx_pf_3CWB_2CL_6Corpus___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_6Corpus___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cname = 0;
  PyObject *__pyx_v_encoding = 0;
  PyObject *__pyx_v_registry_dir = 0;
  int __pyx_r;
  int __pyx_t_1;
  char *__pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cname,&__pyx_n_s__encoding,&__pyx_n_s__registry_dir,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_kp_s_1);
    values[2] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cname);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__encoding);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__registry_dir);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_cname = values[0];
    __pyx_v_encoding = values[1];
    __pyx_v_registry_dir = values[2];
  } else {
    __pyx_v_encoding = ((PyObject *)__pyx_kp_s_1);
    __pyx_v_registry_dir = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_registry_dir = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: __pyx_v_encoding = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_cname = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.Corpus.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_cname);
  __Pyx_INCREF(__pyx_v_encoding);
  __Pyx_INCREF(__pyx_v_registry_dir);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":16
 * cdef class Corpus:
 *   def __cinit__(self, cname, encoding='ISO-8859-15', registry_dir=None):
 *     if registry_dir is None:             # <<<<<<<<<<<<<<
 *       registry_dir=registry
 *     self.corpus=cl_new_corpus(registry_dir,cname)
 */
  __pyx_t_1 = (__pyx_v_registry_dir == Py_None);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":17
 *   def __cinit__(self, cname, encoding='ISO-8859-15', registry_dir=None):
 *     if registry_dir is None:
 *       registry_dir=registry             # <<<<<<<<<<<<<<
 *     self.corpus=cl_new_corpus(registry_dir,cname)
 *     if self.corpus==NULL:
 */
    __Pyx_INCREF(registry);
    __Pyx_DECREF(__pyx_v_registry_dir);
    __pyx_v_registry_dir = registry;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":18
 *     if registry_dir is None:
 *       registry_dir=registry
 *     self.corpus=cl_new_corpus(registry_dir,cname)             # <<<<<<<<<<<<<<
 *     if self.corpus==NULL:
 *       raise KeyError(cname)
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_registry_dir); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_cname); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->corpus = cl_new_corpus(__pyx_t_2, __pyx_t_3);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":19
 *       registry_dir=registry
 *     self.corpus=cl_new_corpus(registry_dir,cname)
 *     if self.corpus==NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError(cname)
 *     self.name=cname
 */
  __pyx_t_1 = (((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->corpus == NULL);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":20
 *     self.corpus=cl_new_corpus(registry_dir,cname)
 *     if self.corpus==NULL:
 *       raise KeyError(cname)             # <<<<<<<<<<<<<<
 *     self.name=cname
 *     self.charset_decoder=codecs.getdecoder(encoding)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_cname);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_cname);
    __Pyx_GIVEREF(__pyx_v_cname);
    __pyx_t_5 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":21
 *     if self.corpus==NULL:
 *       raise KeyError(cname)
 *     self.name=cname             # <<<<<<<<<<<<<<
 *     self.charset_decoder=codecs.getdecoder(encoding)
 *     self.charset_encoder=codecs.getencoder(encoding)
 */
  __Pyx_INCREF(__pyx_v_cname);
  __Pyx_GIVEREF(__pyx_v_cname);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->name);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->name);
  ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->name = __pyx_v_cname;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":22
 *       raise KeyError(cname)
 *     self.name=cname
 *     self.charset_decoder=codecs.getdecoder(encoding)             # <<<<<<<<<<<<<<
 *     self.charset_encoder=codecs.getencoder(encoding)
 *   cpdef bytes to_str(self, s):
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__codecs); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__getdecoder); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_encoding);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_encoding);
  __Pyx_GIVEREF(__pyx_v_encoding);
  __pyx_t_6 = PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_decoder);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_decoder);
  ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_decoder = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":23
 *     self.name=cname
 *     self.charset_decoder=codecs.getdecoder(encoding)
 *     self.charset_encoder=codecs.getencoder(encoding)             # <<<<<<<<<<<<<<
 *   cpdef bytes to_str(self, s):
 *     if isinstance(s,unicode):
 */
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__codecs); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__getencoder); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_encoding);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_encoding);
  __Pyx_GIVEREF(__pyx_v_encoding);
  __pyx_t_4 = PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_encoder);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_encoder);
  ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->charset_encoder = __pyx_t_4;
  __pyx_t_4 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CWB.CL.Corpus.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_cname);
  __Pyx_DECREF(__pyx_v_encoding);
  __Pyx_DECREF(__pyx_v_registry_dir);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":24
 *     self.charset_decoder=codecs.getdecoder(encoding)
 *     self.charset_encoder=codecs.getencoder(encoding)
 *   cpdef bytes to_str(self, s):             # <<<<<<<<<<<<<<
 *     if isinstance(s,unicode):
 *       return self.charset_encoder(s)[0]
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_str(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static  PyObject *__pyx_f_3CWB_2CL_6Corpus_to_str(struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_self, PyObject *__pyx_v_s, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("to_str");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_s);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__to_str); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_3CWB_2CL_6Corpus_to_str)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_s);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_s);
      __Pyx_GIVEREF(__pyx_v_s);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":25
 *     self.charset_encoder=codecs.getencoder(encoding)
 *   cpdef bytes to_str(self, s):
 *     if isinstance(s,unicode):             # <<<<<<<<<<<<<<
 *       return self.charset_encoder(s)[0]
 *     else:
 */
  __pyx_t_4 = PyObject_TypeCheck(__pyx_v_s, ((PyTypeObject *)((PyObject*)&PyUnicode_Type))); 
  if (__pyx_t_4) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":26
 *   cpdef bytes to_str(self, s):
 *     if isinstance(s,unicode):
 *       return self.charset_encoder(s)[0]             # <<<<<<<<<<<<<<
 *     else:
 *       return s
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    __pyx_t_3 = PyObject_Call(__pyx_v_self->charset_encoder, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":28
 *       return self.charset_encoder(s)[0]
 *     else:
 *       return s             # <<<<<<<<<<<<<<
 *   cpdef unicode to_unicode(self, s):
 *     if isinstance(s,unicode):
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_v_s)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = ((PyObject *)__pyx_v_s);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.Corpus.to_str");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":24
 *     self.charset_decoder=codecs.getdecoder(encoding)
 *     self.charset_encoder=codecs.getencoder(encoding)
 *   cpdef bytes to_str(self, s):             # <<<<<<<<<<<<<<
 *     if isinstance(s,unicode):
 *       return self.charset_encoder(s)[0]
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_str(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_str(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_str");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->__pyx_vtab)->to_str(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self), __pyx_v_s, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.Corpus.to_str");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":29
 *     else:
 *       return s
 *   cpdef unicode to_unicode(self, s):             # <<<<<<<<<<<<<<
 *     if isinstance(s,unicode):
 *       return s
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static  PyObject *__pyx_f_3CWB_2CL_6Corpus_to_unicode(struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_self, PyObject *__pyx_v_s, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("to_unicode");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_s);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__to_unicode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_3CWB_2CL_6Corpus_to_unicode)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_s);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_s);
      __Pyx_GIVEREF(__pyx_v_s);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected unicode, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":30
 *       return s
 *   cpdef unicode to_unicode(self, s):
 *     if isinstance(s,unicode):             # <<<<<<<<<<<<<<
 *       return s
 *     else:
 */
  __pyx_t_4 = PyObject_TypeCheck(__pyx_v_s, ((PyTypeObject *)((PyObject*)&PyUnicode_Type))); 
  if (__pyx_t_4) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":31
 *   cpdef unicode to_unicode(self, s):
 *     if isinstance(s,unicode):
 *       return s             # <<<<<<<<<<<<<<
 *     else:
 *       return self.charset_decoder(s)[0]
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    if (!(likely(PyUnicode_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected unicode, got %.200s", Py_TYPE(__pyx_v_s)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = ((PyObject *)__pyx_v_s);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":33
 *       return s
 *     else:
 *       return self.charset_decoder(s)[0]             # <<<<<<<<<<<<<<
 *   def __repr__(self):
 *       return "cwb.CL.Corpus('%s')"%(self.name)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    __pyx_t_3 = PyObject_Call(__pyx_v_self->charset_decoder, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected unicode, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.Corpus.to_unicode");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":29
 *     else:
 *       return s
 *   cpdef unicode to_unicode(self, s):             # <<<<<<<<<<<<<<
 *     if isinstance(s,unicode):
 *       return s
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6Corpus_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_unicode");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->__pyx_vtab)->to_unicode(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self), __pyx_v_s, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.Corpus.to_unicode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":34
 *     else:
 *       return self.charset_decoder(s)[0]
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *       return "cwb.CL.Corpus('%s')"%(self.name)
 *   def __dealloc__(self):
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6Corpus___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__repr__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":35
 *       return self.charset_decoder(s)[0]
 *   def __repr__(self):
 *       return "cwb.CL.Corpus('%s')"%(self.name)             # <<<<<<<<<<<<<<
 *   def __dealloc__(self):
 *     if self.corpus!=NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_2), ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.Corpus.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":36
 *   def __repr__(self):
 *       return "cwb.CL.Corpus('%s')"%(self.name)
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     if self.corpus!=NULL:
 *       cl_delete_corpus(self.corpus)
 */

static void __pyx_pf_3CWB_2CL_6Corpus___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_3CWB_2CL_6Corpus___dealloc__(PyObject *__pyx_v_self) {
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":37
 *       return "cwb.CL.Corpus('%s')"%(self.name)
 *   def __dealloc__(self):
 *     if self.corpus!=NULL:             # <<<<<<<<<<<<<<
 *       cl_delete_corpus(self.corpus)
 *     self.corpus=NULL
 */
  __pyx_t_1 = (((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->corpus != NULL);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":38
 *   def __dealloc__(self):
 *     if self.corpus!=NULL:
 *       cl_delete_corpus(self.corpus)             # <<<<<<<<<<<<<<
 *     self.corpus=NULL
 *   def attribute(self, name, atype):
 */
    cl_delete_corpus(((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->corpus);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":39
 *     if self.corpus!=NULL:
 *       cl_delete_corpus(self.corpus)
 *     self.corpus=NULL             # <<<<<<<<<<<<<<
 *   def attribute(self, name, atype):
 *     if atype=='s':
 */
  ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_v_self)->corpus = NULL;

  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":40
 *       cl_delete_corpus(self.corpus)
 *     self.corpus=NULL
 *   def attribute(self, name, atype):             # <<<<<<<<<<<<<<
 *     if atype=='s':
 *       return AttStruc(self,name)
 */

static PyObject *__pyx_pf_3CWB_2CL_6Corpus_attribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6Corpus_attribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_atype = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__atype,0};
  __Pyx_RefNannySetupContext("attribute");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__atype);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("attribute", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "attribute") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_name = values[0];
    __pyx_v_atype = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_name = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_atype = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attribute", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.Corpus.attribute");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_INCREF(__pyx_v_atype);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":41
 *     self.corpus=NULL
 *   def attribute(self, name, atype):
 *     if atype=='s':             # <<<<<<<<<<<<<<
 *       return AttStruc(self,name)
 *     elif atype=='p':
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_atype, ((PyObject *)__pyx_n_s__s), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":42
 *   def attribute(self, name, atype):
 *     if atype=='s':
 *       return AttStruc(self,name)             # <<<<<<<<<<<<<<
 *     elif atype=='p':
 *       return PosAttrib(self,name)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_AttStruc)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":43
 *     if atype=='s':
 *       return AttStruc(self,name)
 *     elif atype=='p':             # <<<<<<<<<<<<<<
 *       return PosAttrib(self,name)
 *     elif atype=='a':
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_atype, ((PyObject *)__pyx_n_s__p), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":44
 *       return AttStruc(self,name)
 *     elif atype=='p':
 *       return PosAttrib(self,name)             # <<<<<<<<<<<<<<
 *     elif atype=='a':
 *       return AlignAttrib(self,name)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_PosAttrib)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":45
 *     elif atype=='p':
 *       return PosAttrib(self,name)
 *     elif atype=='a':             # <<<<<<<<<<<<<<
 *       return AlignAttrib(self,name)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_atype, ((PyObject *)__pyx_n_s__a), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":46
 *       return PosAttrib(self,name)
 *     elif atype=='a':
 *       return AlignAttrib(self,name)             # <<<<<<<<<<<<<<
 * 
 * cdef class IDList:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_AlignAttrib)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.Corpus.attribute");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_name);
  __Pyx_DECREF(__pyx_v_atype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":49
 * 
 * cdef class IDList:
 *   def __cinit__(self, seq=None):             # <<<<<<<<<<<<<<
 *     cdef int i, old_val, is_sorted
 *     if seq is None:
 */

static int __pyx_pf_3CWB_2CL_6IDList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_6IDList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  int __pyx_v_i;
  int __pyx_v_old_val;
  int __pyx_v_is_sorted;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_seq = values[0];
  } else {
    __pyx_v_seq = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_seq = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.IDList.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_seq);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":51
 *   def __cinit__(self, seq=None):
 *     cdef int i, old_val, is_sorted
 *     if seq is None:             # <<<<<<<<<<<<<<
 *       self.ids=NULL
 *       self.length=0
 */
  __pyx_t_1 = (__pyx_v_seq == Py_None);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":52
 *     cdef int i, old_val, is_sorted
 *     if seq is None:
 *       self.ids=NULL             # <<<<<<<<<<<<<<
 *       self.length=0
 *     else:
 */
    ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids = NULL;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":53
 *     if seq is None:
 *       self.ids=NULL
 *       self.length=0             # <<<<<<<<<<<<<<
 *     else:
 *       self.length=len(seq)
 */
    ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":55
 *       self.length=0
 *     else:
 *       self.length=len(seq)             # <<<<<<<<<<<<<<
 *       self.ids=<int *>malloc(self.length*sizeof(int))
 *       old_val=-1
 */
    __pyx_t_2 = PyObject_Length(__pyx_v_seq); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length = __pyx_t_2;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":56
 *     else:
 *       self.length=len(seq)
 *       self.ids=<int *>malloc(self.length*sizeof(int))             # <<<<<<<<<<<<<<
 *       old_val=-1
 *       is_sorted=True
 */
    ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids = ((int *)malloc((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length * (sizeof(int)))));

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":57
 *       self.length=len(seq)
 *       self.ids=<int *>malloc(self.length*sizeof(int))
 *       old_val=-1             # <<<<<<<<<<<<<<
 *       is_sorted=True
 *       for i from 0<=i<self.length:
 */
    __pyx_v_old_val = -1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":58
 *       self.ids=<int *>malloc(self.length*sizeof(int))
 *       old_val=-1
 *       is_sorted=True             # <<<<<<<<<<<<<<
 *       for i from 0<=i<self.length:
 *         if seq[i]<old_val:
 */
    __pyx_v_is_sorted = 1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":59
 *       old_val=-1
 *       is_sorted=True
 *       for i from 0<=i<self.length:             # <<<<<<<<<<<<<<
 *         if seq[i]<old_val:
 *           is_sorted=False
 */
    __pyx_t_3 = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_3; __pyx_v_i++) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":60
 *       is_sorted=True
 *       for i from 0<=i<self.length:
 *         if seq[i]<old_val:             # <<<<<<<<<<<<<<
 *           is_sorted=False
 *         old_val=seq[i]
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_seq, __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_old_val); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_1) {

        /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":61
 *       for i from 0<=i<self.length:
 *         if seq[i]<old_val:
 *           is_sorted=False             # <<<<<<<<<<<<<<
 *         old_val=seq[i]
 *         self.ids[i]=seq[i]
 */
        __pyx_v_is_sorted = 0;
        goto __pyx_L9;
      }
      __pyx_L9:;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":62
 *         if seq[i]<old_val:
 *           is_sorted=False
 *         old_val=seq[i]             # <<<<<<<<<<<<<<
 *         self.ids[i]=seq[i]
 *       assert sorted
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_seq, __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_old_val = __pyx_t_7;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":63
 *           is_sorted=False
 *         old_val=seq[i]
 *         self.ids[i]=seq[i]             # <<<<<<<<<<<<<<
 *       assert sorted
 *   def __len__(self):
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_seq, __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_i]) = __pyx_t_7;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":64
 *         old_val=seq[i]
 *         self.ids[i]=seq[i]
 *       assert sorted             # <<<<<<<<<<<<<<
 *   def __len__(self):
 *     return self.length
 */
    #ifndef PYREX_WITHOUT_ASSERTIONS
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_builtin_sorted); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CWB.CL.IDList.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_seq);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":65
 *         self.ids[i]=seq[i]
 *       assert sorted
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self.length
 *   def __getitem__(self,i):
 */

static Py_ssize_t __pyx_pf_3CWB_2CL_6IDList___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_3CWB_2CL_6IDList___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":66
 *       assert sorted
 *   def __len__(self):
 *     return self.length             # <<<<<<<<<<<<<<
 *   def __getitem__(self,i):
 *     if i<0 or i>=self.length:
 */
  __pyx_r = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":67
 *   def __len__(self):
 *     return self.length
 *   def __getitem__(self,i):             # <<<<<<<<<<<<<<
 *     if i<0 or i>=self.length:
 *       raise IndexError
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6IDList___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_i);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":68
 *     return self.length
 *   def __getitem__(self,i):
 *     if i<0 or i>=self.length:             # <<<<<<<<<<<<<<
 *       raise IndexError
 *     return self.ids[i]
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_t_1, Py_GE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_2;
  }
  if (__pyx_t_5) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":69
 *   def __getitem__(self,i):
 *     if i<0 or i>=self.length:
 *       raise IndexError             # <<<<<<<<<<<<<<
 *     return self.ids[i]
 *   def __contains__(self,v):
 */
    __Pyx_Raise(__pyx_builtin_IndexError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":70
 *     if i<0 or i>=self.length:
 *       raise IndexError
 *     return self.ids[i]             # <<<<<<<<<<<<<<
 *   def __contains__(self,v):
 *     cdef int lo,hi,mid,val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_t_6])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.IDList.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":71
 *       raise IndexError
 *     return self.ids[i]
 *   def __contains__(self,v):             # <<<<<<<<<<<<<<
 *     cdef int lo,hi,mid,val
 *     lo=0
 */

static int __pyx_pf_3CWB_2CL_6IDList___contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pf_3CWB_2CL_6IDList___contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_v_lo;
  int __pyx_v_hi;
  int __pyx_v_mid;
  int __pyx_v_val;
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__contains__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_v);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":73
 *   def __contains__(self,v):
 *     cdef int lo,hi,mid,val
 *     lo=0             # <<<<<<<<<<<<<<
 *     hi=self.length
 *     while hi-lo>1:
 */
  __pyx_v_lo = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":74
 *     cdef int lo,hi,mid,val
 *     lo=0
 *     hi=self.length             # <<<<<<<<<<<<<<
 *     while hi-lo>1:
 *       mid=(hi+lo)/2
 */
  __pyx_v_hi = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":75
 *     lo=0
 *     hi=self.length
 *     while hi-lo>1:             # <<<<<<<<<<<<<<
 *       mid=(hi+lo)/2
 *       val=self.ids[mid]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_hi - __pyx_v_lo) > 1);
    if (!__pyx_t_1) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":76
 *     hi=self.length
 *     while hi-lo>1:
 *       mid=(hi+lo)/2             # <<<<<<<<<<<<<<
 *       val=self.ids[mid]
 *       if val==v:
 */
    __pyx_v_mid = __Pyx_div_long((__pyx_v_hi + __pyx_v_lo), 2);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":77
 *     while hi-lo>1:
 *       mid=(hi+lo)/2
 *       val=self.ids[mid]             # <<<<<<<<<<<<<<
 *       if val==v:
 *         return True
 */
    __pyx_v_val = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_mid]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":78
 *       mid=(hi+lo)/2
 *       val=self.ids[mid]
 *       if val==v:             # <<<<<<<<<<<<<<
 *         return True
 *       elif val<v:
 */
    __pyx_t_2 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_v, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":79
 *       val=self.ids[mid]
 *       if val==v:
 *         return True             # <<<<<<<<<<<<<<
 *       elif val<v:
 *         lo=mid+1
 */
      __pyx_r = 1;
      goto __pyx_L0;
      goto __pyx_L7;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":80
 *       if val==v:
 *         return True
 *       elif val<v:             # <<<<<<<<<<<<<<
 *         lo=mid+1
 *       else:
 */
    __pyx_t_3 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_v, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":81
 *         return True
 *       elif val<v:
 *         lo=mid+1             # <<<<<<<<<<<<<<
 *       else:
 *         hi=mid
 */
      __pyx_v_lo = (__pyx_v_mid + 1);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":83
 *         lo=mid+1
 *       else:
 *         hi=mid             # <<<<<<<<<<<<<<
 *     if lo<hi:
 *       return self.ids[lo]==v
 */
      __pyx_v_hi = __pyx_v_mid;
    }
    __pyx_L7:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":84
 *       else:
 *         hi=mid
 *     if lo<hi:             # <<<<<<<<<<<<<<
 *       return self.ids[lo]==v
 *     else:
 */
  __pyx_t_1 = (__pyx_v_lo < __pyx_v_hi);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":85
 *         hi=mid
 *     if lo<hi:
 *       return self.ids[lo]==v             # <<<<<<<<<<<<<<
 *     else:
 *       return False
 */
    __pyx_t_2 = PyInt_FromLong((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_lo])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_v, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;
    goto __pyx_L8;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":87
 *       return self.ids[lo]==v
 *     else:
 *       return False             # <<<<<<<<<<<<<<
 *   def __and__(IDList self, IDList other):
 *     return self.join(other,0)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  __pyx_L8:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.IDList.__contains__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":88
 *     else:
 *       return False
 *   def __and__(IDList self, IDList other):             # <<<<<<<<<<<<<<
 *     return self.join(other,0)
 *   def __or__(IDList self, IDList other):
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList___and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6IDList___and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__and__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3CWB_2CL_IDList, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3CWB_2CL_IDList, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":89
 *       return False
 *   def __and__(IDList self, IDList other):
 *     return self.join(other,0)             # <<<<<<<<<<<<<<
 *   def __or__(IDList self, IDList other):
 *     cdef int *result
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_IDList *)((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->__pyx_vtab)->join(((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self), ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other), 0, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.IDList.__and__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":90
 *   def __and__(IDList self, IDList other):
 *     return self.join(other,0)
 *   def __or__(IDList self, IDList other):             # <<<<<<<<<<<<<<
 *     cdef int *result
 *     cdef int k1, k2, k
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList___or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6IDList___or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int *__pyx_v_result;
  int __pyx_v_k1;
  int __pyx_v_k2;
  int __pyx_v_k;
  int __pyx_v_val1;
  int __pyx_v_val2;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_r;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__or__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_other);
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3CWB_2CL_IDList, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3CWB_2CL_IDList, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":97
 *     # allocate once, using a conservative estimate on
 *     # how big the result list is
 *     result=<int *>malloc((self.length+other.length)*sizeof(int))             # <<<<<<<<<<<<<<
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 */
  __pyx_v_result = ((int *)malloc(((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length + ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->length) * (sizeof(int)))));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":98
 *     # how big the result list is
 *     result=<int *>malloc((self.length+other.length)*sizeof(int))
 *     k1=k2=k=0             # <<<<<<<<<<<<<<
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 */
  __pyx_v_k1 = 0;
  __pyx_v_k2 = 0;
  __pyx_v_k = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":99
 *     result=<int *>malloc((self.length+other.length)*sizeof(int))
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:             # <<<<<<<<<<<<<<
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]
 */
  while (1) {
    __pyx_t_1 = (__pyx_v_k1 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_k2 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->length);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (!__pyx_t_3) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":100
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]             # <<<<<<<<<<<<<<
 *       val2=other.ids[k2]
 *       if val1<val2:
 */
    __pyx_v_val1 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_k1]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":101
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]             # <<<<<<<<<<<<<<
 *       if val1<val2:
 *         result[k]=val1
 */
    __pyx_v_val2 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->ids[__pyx_v_k2]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":102
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]
 *       if val1<val2:             # <<<<<<<<<<<<<<
 *         result[k]=val1
 *         k+=1
 */
    __pyx_t_3 = (__pyx_v_val1 < __pyx_v_val2);
    if (__pyx_t_3) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":103
 *       val2=other.ids[k2]
 *       if val1<val2:
 *         result[k]=val1             # <<<<<<<<<<<<<<
 *         k+=1
 *         k1+=1
 */
      (__pyx_v_result[__pyx_v_k]) = __pyx_v_val1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":104
 *       if val1<val2:
 *         result[k]=val1
 *         k+=1             # <<<<<<<<<<<<<<
 *         k1+=1
 *       elif val2<val1:
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":105
 *         result[k]=val1
 *         k+=1
 *         k1+=1             # <<<<<<<<<<<<<<
 *       elif val2<val1:
 *         result[k]=val2
 */
      __pyx_v_k1 += 1;
      goto __pyx_L7;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":106
 *         k+=1
 *         k1+=1
 *       elif val2<val1:             # <<<<<<<<<<<<<<
 *         result[k]=val2
 *         k+=1
 */
    __pyx_t_3 = (__pyx_v_val2 < __pyx_v_val1);
    if (__pyx_t_3) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":107
 *         k1+=1
 *       elif val2<val1:
 *         result[k]=val2             # <<<<<<<<<<<<<<
 *         k+=1
 *         k2+=1
 */
      (__pyx_v_result[__pyx_v_k]) = __pyx_v_val2;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":108
 *       elif val2<val1:
 *         result[k]=val2
 *         k+=1             # <<<<<<<<<<<<<<
 *         k2+=1
 *       else:
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":109
 *         result[k]=val2
 *         k+=1
 *         k2+=1             # <<<<<<<<<<<<<<
 *       else:
 *         result[k]=val1
 */
      __pyx_v_k2 += 1;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":111
 *         k2+=1
 *       else:
 *         result[k]=val1             # <<<<<<<<<<<<<<
 *         k+=1
 *         k1+=1
 */
      (__pyx_v_result[__pyx_v_k]) = __pyx_v_val1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":112
 *       else:
 *         result[k]=val1
 *         k+=1             # <<<<<<<<<<<<<<
 *         k1+=1
 *         k2+=1
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":113
 *         result[k]=val1
 *         k+=1
 *         k1+=1             # <<<<<<<<<<<<<<
 *         k2+=1
 *     while k1<self.length:
 */
      __pyx_v_k1 += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":114
 *         k+=1
 *         k1+=1
 *         k2+=1             # <<<<<<<<<<<<<<
 *     while k1<self.length:
 *       val1=self.ids[k1]
 */
      __pyx_v_k2 += 1;
    }
    __pyx_L7:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":115
 *         k1+=1
 *         k2+=1
 *     while k1<self.length:             # <<<<<<<<<<<<<<
 *       val1=self.ids[k1]
 *       result[k]=val1
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_k1 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length);
    if (!__pyx_t_3) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":116
 *         k2+=1
 *     while k1<self.length:
 *       val1=self.ids[k1]             # <<<<<<<<<<<<<<
 *       result[k]=val1
 *       k+=1
 */
    __pyx_v_val1 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_k1]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":117
 *     while k1<self.length:
 *       val1=self.ids[k1]
 *       result[k]=val1             # <<<<<<<<<<<<<<
 *       k+=1
 *       k1+=1
 */
    (__pyx_v_result[__pyx_v_k]) = __pyx_v_val1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":118
 *       val1=self.ids[k1]
 *       result[k]=val1
 *       k+=1             # <<<<<<<<<<<<<<
 *       k1+=1
 *     while k2<other.length:
 */
    __pyx_v_k += 1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":119
 *       result[k]=val1
 *       k+=1
 *       k1+=1             # <<<<<<<<<<<<<<
 *     while k2<other.length:
 *       val2=other.ids[k2]
 */
    __pyx_v_k1 += 1;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":120
 *       k+=1
 *       k1+=1
 *     while k2<other.length:             # <<<<<<<<<<<<<<
 *       val2=other.ids[k2]
 *       result[k]=val2
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_k2 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->length);
    if (!__pyx_t_3) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":121
 *       k1+=1
 *     while k2<other.length:
 *       val2=other.ids[k2]             # <<<<<<<<<<<<<<
 *       result[k]=val2
 *       k+=1
 */
    __pyx_v_val2 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->ids[__pyx_v_k2]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":122
 *     while k2<other.length:
 *       val2=other.ids[k2]
 *       result[k]=val2             # <<<<<<<<<<<<<<
 *       k+=1
 *       k2+=1
 */
    (__pyx_v_result[__pyx_v_k]) = __pyx_v_val2;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":123
 *       val2=other.ids[k2]
 *       result[k]=val2
 *       k+=1             # <<<<<<<<<<<<<<
 *       k2+=1
 *     r=IDList()
 */
    __pyx_v_k += 1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":124
 *       result[k]=val2
 *       k+=1
 *       k2+=1             # <<<<<<<<<<<<<<
 *     r=IDList()
 *     r.length=k
 */
    __pyx_v_k2 += 1;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":125
 *       k+=1
 *       k2+=1
 *     r=IDList()             # <<<<<<<<<<<<<<
 *     r.length=k
 *     r.ids=result
 */
  __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_v_r));
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":126
 *       k2+=1
 *     r=IDList()
 *     r.length=k             # <<<<<<<<<<<<<<
 *     r.ids=result
 *     return r
 */
  __pyx_v_r->length = __pyx_v_k;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":127
 *     r=IDList()
 *     r.length=k
 *     r.ids=result             # <<<<<<<<<<<<<<
 *     return r
 *   def __sub__(IDList self, IDList other):
 */
  __pyx_v_r->ids = __pyx_v_result;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":128
 *     r.length=k
 *     r.ids=result
 *     return r             # <<<<<<<<<<<<<<
 *   def __sub__(IDList self, IDList other):
 *     cdef int *result
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.IDList.__or__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_r);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":129
 *     r.ids=result
 *     return r
 *   def __sub__(IDList self, IDList other):             # <<<<<<<<<<<<<<
 *     cdef int *result
 *     cdef int k1, k2, k
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList___sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6IDList___sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int *__pyx_v_result;
  int __pyx_v_k1;
  int __pyx_v_k2;
  int __pyx_v_k;
  int __pyx_v_val1;
  int __pyx_v_val2;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_r;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__sub__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_other);
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3CWB_2CL_IDList, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3CWB_2CL_IDList, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":136
 *     # allocate once, using a conservative estimate on
 *     # how big the result list is
 *     result=<int *>malloc(self.length*sizeof(int))             # <<<<<<<<<<<<<<
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 */
  __pyx_v_result = ((int *)malloc((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length * (sizeof(int)))));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":137
 *     # how big the result list is
 *     result=<int *>malloc(self.length*sizeof(int))
 *     k1=k2=k=0             # <<<<<<<<<<<<<<
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 */
  __pyx_v_k1 = 0;
  __pyx_v_k2 = 0;
  __pyx_v_k = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":138
 *     result=<int *>malloc(self.length*sizeof(int))
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:             # <<<<<<<<<<<<<<
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]
 */
  while (1) {
    __pyx_t_1 = (__pyx_v_k1 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_k2 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->length);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (!__pyx_t_3) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":139
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]             # <<<<<<<<<<<<<<
 *       val2=other.ids[k2]
 *       if val1<val2:
 */
    __pyx_v_val1 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_k1]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":140
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]             # <<<<<<<<<<<<<<
 *       if val1<val2:
 *         result[k]=val1
 */
    __pyx_v_val2 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_other)->ids[__pyx_v_k2]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":141
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]
 *       if val1<val2:             # <<<<<<<<<<<<<<
 *         result[k]=val1
 *         k+=1
 */
    __pyx_t_3 = (__pyx_v_val1 < __pyx_v_val2);
    if (__pyx_t_3) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":142
 *       val2=other.ids[k2]
 *       if val1<val2:
 *         result[k]=val1             # <<<<<<<<<<<<<<
 *         k+=1
 *         k1+=1
 */
      (__pyx_v_result[__pyx_v_k]) = __pyx_v_val1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":143
 *       if val1<val2:
 *         result[k]=val1
 *         k+=1             # <<<<<<<<<<<<<<
 *         k1+=1
 *       elif val2<val1:
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":144
 *         result[k]=val1
 *         k+=1
 *         k1+=1             # <<<<<<<<<<<<<<
 *       elif val2<val1:
 *         k2+=1
 */
      __pyx_v_k1 += 1;
      goto __pyx_L7;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":145
 *         k+=1
 *         k1+=1
 *       elif val2<val1:             # <<<<<<<<<<<<<<
 *         k2+=1
 *       else:
 */
    __pyx_t_3 = (__pyx_v_val2 < __pyx_v_val1);
    if (__pyx_t_3) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":146
 *         k1+=1
 *       elif val2<val1:
 *         k2+=1             # <<<<<<<<<<<<<<
 *       else:
 *         k1+=1
 */
      __pyx_v_k2 += 1;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":148
 *         k2+=1
 *       else:
 *         k1+=1             # <<<<<<<<<<<<<<
 *         k2+=1
 *     while k1<self.length:
 */
      __pyx_v_k1 += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":149
 *       else:
 *         k1+=1
 *         k2+=1             # <<<<<<<<<<<<<<
 *     while k1<self.length:
 *       result[k]=self.ids[k1]
 */
      __pyx_v_k2 += 1;
    }
    __pyx_L7:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":150
 *         k1+=1
 *         k2+=1
 *     while k1<self.length:             # <<<<<<<<<<<<<<
 *       result[k]=self.ids[k1]
 *       k+=1
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_k1 < ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->length);
    if (!__pyx_t_3) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":151
 *         k2+=1
 *     while k1<self.length:
 *       result[k]=self.ids[k1]             # <<<<<<<<<<<<<<
 *       k+=1
 *       k1+=1
 */
    (__pyx_v_result[__pyx_v_k]) = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids[__pyx_v_k1]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":152
 *     while k1<self.length:
 *       result[k]=self.ids[k1]
 *       k+=1             # <<<<<<<<<<<<<<
 *       k1+=1
 *     r=IDList()
 */
    __pyx_v_k += 1;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":153
 *       result[k]=self.ids[k1]
 *       k+=1
 *       k1+=1             # <<<<<<<<<<<<<<
 *     r=IDList()
 *     r.length=k
 */
    __pyx_v_k1 += 1;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":154
 *       k+=1
 *       k1+=1
 *     r=IDList()             # <<<<<<<<<<<<<<
 *     r.length=k
 *     r.ids=result
 */
  __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_v_r));
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":155
 *       k1+=1
 *     r=IDList()
 *     r.length=k             # <<<<<<<<<<<<<<
 *     r.ids=result
 *     return r
 */
  __pyx_v_r->length = __pyx_v_k;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":156
 *     r=IDList()
 *     r.length=k
 *     r.ids=result             # <<<<<<<<<<<<<<
 *     return r
 *   cpdef IDList join(self, IDList other, int offset):
 */
  __pyx_v_r->ids = __pyx_v_result;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":157
 *     r.length=k
 *     r.ids=result
 *     return r             # <<<<<<<<<<<<<<
 *   cpdef IDList join(self, IDList other, int offset):
 *     cdef int *result
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.IDList.__sub__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_r);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":158
 *     r.ids=result
 *     return r
 *   cpdef IDList join(self, IDList other, int offset):             # <<<<<<<<<<<<<<
 *     cdef int *result
 *     cdef int k1, k2, k
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList_join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  struct __pyx_obj_3CWB_2CL_IDList *__pyx_f_3CWB_2CL_6IDList_join(struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_self, struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_other, int __pyx_v_offset, int __pyx_skip_dispatch) {
  int *__pyx_v_result;
  int __pyx_v_k1;
  int __pyx_v_k2;
  int __pyx_v_k;
  int __pyx_v_val1;
  int __pyx_v_val2;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_r;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("join");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_other);
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_3CWB_2CL_6IDList_join)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = PyInt_FromLong(__pyx_v_offset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_other));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3CWB_2CL_IDList))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":165
 *     # allocate once, using a conservative estimate on
 *     # how big the result list is
 *     if other.length<self.length:             # <<<<<<<<<<<<<<
 *       result=<int *>malloc(other.length*sizeof(int))
 *     else:
 */
  __pyx_t_4 = (__pyx_v_other->length < __pyx_v_self->length);
  if (__pyx_t_4) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":166
 *     # how big the result list is
 *     if other.length<self.length:
 *       result=<int *>malloc(other.length*sizeof(int))             # <<<<<<<<<<<<<<
 *     else:
 *       result=<int *>malloc(self.length*sizeof(int))
 */
    __pyx_v_result = ((int *)malloc((__pyx_v_other->length * (sizeof(int)))));
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":168
 *       result=<int *>malloc(other.length*sizeof(int))
 *     else:
 *       result=<int *>malloc(self.length*sizeof(int))             # <<<<<<<<<<<<<<
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 */
    __pyx_v_result = ((int *)malloc((__pyx_v_self->length * (sizeof(int)))));
  }
  __pyx_L3:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":169
 *     else:
 *       result=<int *>malloc(self.length*sizeof(int))
 *     k1=k2=k=0             # <<<<<<<<<<<<<<
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 */
  __pyx_v_k1 = 0;
  __pyx_v_k2 = 0;
  __pyx_v_k = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":170
 *       result=<int *>malloc(self.length*sizeof(int))
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:             # <<<<<<<<<<<<<<
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]-offset
 */
  while (1) {
    __pyx_t_4 = (__pyx_v_k1 < __pyx_v_self->length);
    if (__pyx_t_4) {
      __pyx_t_5 = (__pyx_v_k2 < __pyx_v_other->length);
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_4;
    }
    if (!__pyx_t_6) break;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":171
 *     k1=k2=k=0
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]             # <<<<<<<<<<<<<<
 *       val2=other.ids[k2]-offset
 *       if val1<val2:
 */
    __pyx_v_val1 = (__pyx_v_self->ids[__pyx_v_k1]);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":172
 *     while k1<self.length and k2<other.length:
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]-offset             # <<<<<<<<<<<<<<
 *       if val1<val2:
 *         k1+=1
 */
    __pyx_v_val2 = ((__pyx_v_other->ids[__pyx_v_k2]) - __pyx_v_offset);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":173
 *       val1=self.ids[k1]
 *       val2=other.ids[k2]-offset
 *       if val1<val2:             # <<<<<<<<<<<<<<
 *         k1+=1
 *       elif val2<val1:
 */
    __pyx_t_6 = (__pyx_v_val1 < __pyx_v_val2);
    if (__pyx_t_6) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":174
 *       val2=other.ids[k2]-offset
 *       if val1<val2:
 *         k1+=1             # <<<<<<<<<<<<<<
 *       elif val2<val1:
 *         k2+=1
 */
      __pyx_v_k1 += 1;
      goto __pyx_L6;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":175
 *       if val1<val2:
 *         k1+=1
 *       elif val2<val1:             # <<<<<<<<<<<<<<
 *         k2+=1
 *       else:
 */
    __pyx_t_6 = (__pyx_v_val2 < __pyx_v_val1);
    if (__pyx_t_6) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":176
 *         k1+=1
 *       elif val2<val1:
 *         k2+=1             # <<<<<<<<<<<<<<
 *       else:
 *         result[k]=val1
 */
      __pyx_v_k2 += 1;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":178
 *         k2+=1
 *       else:
 *         result[k]=val1             # <<<<<<<<<<<<<<
 *         k+=1
 *         k1+=1
 */
      (__pyx_v_result[__pyx_v_k]) = __pyx_v_val1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":179
 *       else:
 *         result[k]=val1
 *         k+=1             # <<<<<<<<<<<<<<
 *         k1+=1
 *         k2+=1
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":180
 *         result[k]=val1
 *         k+=1
 *         k1+=1             # <<<<<<<<<<<<<<
 *         k2+=1
 *     r=IDList()
 */
      __pyx_v_k1 += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":181
 *         k+=1
 *         k1+=1
 *         k2+=1             # <<<<<<<<<<<<<<
 *     r=IDList()
 *     r.length=k
 */
      __pyx_v_k2 += 1;
    }
    __pyx_L6:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":182
 *         k1+=1
 *         k2+=1
 *     r=IDList()             # <<<<<<<<<<<<<<
 *     r.length=k
 *     r.ids=result
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_r));
  __pyx_v_r = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":183
 *         k2+=1
 *     r=IDList()
 *     r.length=k             # <<<<<<<<<<<<<<
 *     r.ids=result
 *     return r
 */
  __pyx_v_r->length = __pyx_v_k;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":184
 *     r=IDList()
 *     r.length=k
 *     r.ids=result             # <<<<<<<<<<<<<<
 *     return r
 *   def __dealloc__(self):
 */
  __pyx_v_r->ids = __pyx_v_result;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":185
 *     r.length=k
 *     r.ids=result
 *     return r             # <<<<<<<<<<<<<<
 *   def __dealloc__(self):
 *     if self.ids!=NULL:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.IDList.join");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_r);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":158
 *     r.ids=result
 *     return r
 *   cpdef IDList join(self, IDList other, int offset):             # <<<<<<<<<<<<<<
 *     cdef int *result
 *     cdef int k1, k2, k
 */

static PyObject *__pyx_pf_3CWB_2CL_6IDList_join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_6IDList_join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_other = 0;
  int __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__other,&__pyx_n_s__offset,0};
  __Pyx_RefNannySetupContext("join");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__other);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__offset);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("join", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "join") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_other = ((struct __pyx_obj_3CWB_2CL_IDList *)values[0]);
    __pyx_v_offset = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_offset == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_other = ((struct __pyx_obj_3CWB_2CL_IDList *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_offset = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_offset == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.IDList.join");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3CWB_2CL_IDList, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_IDList *)((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->__pyx_vtab)->join(((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self), __pyx_v_other, __pyx_v_offset, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.IDList.join");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":186
 *     r.ids=result
 *     return r
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     if self.ids!=NULL:
 *       free(self.ids)
 */

static void __pyx_pf_3CWB_2CL_6IDList___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_3CWB_2CL_6IDList___dealloc__(PyObject *__pyx_v_self) {
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":187
 *     return r
 *   def __dealloc__(self):
 *     if self.ids!=NULL:             # <<<<<<<<<<<<<<
 *       free(self.ids)
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids != NULL);
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":188
 *   def __dealloc__(self):
 *     if self.ids!=NULL:
 *       free(self.ids)             # <<<<<<<<<<<<<<
 * 
 * cdef class AttrDictionary
 */
    free(((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_self)->ids);
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":193
 * 
 * cdef class PosAttrib:
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "cwb.Attribute(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":194
 * cdef class PosAttrib:
 *   def __repr__(self):
 *     return "cwb.Attribute(%s,'%s')"%(self.parent,self.attname)             # <<<<<<<<<<<<<<
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent));
  __Pyx_GIVEREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent));
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  __Pyx_GIVEREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_3), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":195
 *   def __repr__(self):
 *     return "cwb.Attribute(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):             # <<<<<<<<<<<<<<
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_POS)
 */

static int __pyx_pf_3CWB_2CL_9PosAttrib___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_9PosAttrib___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_parent = 0;
  PyObject *__pyx_v_attname = 0;
  int __pyx_r;
  char *__pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__attname,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__attname);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)values[0]);
    __pyx_v_attname = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_attname = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.PosAttrib.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_parent);
  __Pyx_INCREF(__pyx_v_attname);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_3CWB_2CL_Corpus, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":196
 *     return "cwb.Attribute(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent             # <<<<<<<<<<<<<<
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_POS)
 *     if self.att==NULL:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent));
  ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent = __pyx_v_parent;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":197
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_POS)             # <<<<<<<<<<<<<<
 *     if self.att==NULL:
 *       raise KeyError
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_attname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att = cl_new_attribute(__pyx_v_parent->corpus, __pyx_t_1, ATT_POS);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":198
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_POS)
 *     if self.att==NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError
 *     self.attname=attname
 */
  __pyx_t_2 = (((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att == NULL);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":199
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_POS)
 *     if self.att==NULL:
 *       raise KeyError             # <<<<<<<<<<<<<<
 *     self.attname=attname
 *   def getName(self):
 */
    __Pyx_Raise(__pyx_builtin_KeyError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":200
 *     if self.att==NULL:
 *       raise KeyError
 *     self.attname=attname             # <<<<<<<<<<<<<<
 *   def getName(self):
 *     return self.attname
 */
  __Pyx_INCREF(__pyx_v_attname);
  __Pyx_GIVEREF(__pyx_v_attname);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname = __pyx_v_attname;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CWB.CL.PosAttrib.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_parent);
  __Pyx_DECREF(__pyx_v_attname);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":201
 *       raise KeyError
 *     self.attname=attname
 *   def getName(self):             # <<<<<<<<<<<<<<
 *     return self.attname
 *   def getDictionary(self):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_getName(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_getName(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("getName");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":202
 *     self.attname=attname
 *   def getName(self):
 *     return self.attname             # <<<<<<<<<<<<<<
 *   def getDictionary(self):
 *     return AttrDictionary(self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname);
  __pyx_r = ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->attname;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":203
 *   def getName(self):
 *     return self.attname
 *   def getDictionary(self):             # <<<<<<<<<<<<<<
 *     return AttrDictionary(self)
 *   def __getitem__(self,offset):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_getDictionary(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_getDictionary(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getDictionary");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":204
 *     return self.attname
 *   def getDictionary(self):
 *     return AttrDictionary(self)             # <<<<<<<<<<<<<<
 *   def __getitem__(self,offset):
 *     cdef int i
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_AttrDictionary)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.getDictionary");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":205
 *   def getDictionary(self):
 *     return AttrDictionary(self)
 *   def __getitem__(self,offset):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     if isinstance(offset,int):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  int __pyx_v_i;
  PyObject *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_offset);
  __pyx_v_result = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":207
 *   def __getitem__(self,offset):
 *     cdef int i
 *     if isinstance(offset,int):             # <<<<<<<<<<<<<<
 *       if offset<0 or offset>=len(self):
 *         raise IndexError('P-attribute offset out of bounds')
 */
  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_offset, ((PyTypeObject *)((PyObject*)&PyInt_Type))); 
  if (__pyx_t_1) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":208
 *     cdef int i
 *     if isinstance(offset,int):
 *       if offset<0 or offset>=len(self):             # <<<<<<<<<<<<<<
 *         raise IndexError('P-attribute offset out of bounds')
 *       return cl_cpos2str(self.att,offset)
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_offset, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_1) {
      __pyx_t_3 = PyObject_Length(__pyx_v_self); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_offset, __pyx_t_2, Py_GE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_1;
    }
    if (__pyx_t_6) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":209
 *     if isinstance(offset,int):
 *       if offset<0 or offset>=len(self):
 *         raise IndexError('P-attribute offset out of bounds')             # <<<<<<<<<<<<<<
 *       return cl_cpos2str(self.att,offset)
 *     else:
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_4));
      __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
      __pyx_t_2 = PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":210
 *       if offset<0 or offset>=len(self):
 *         raise IndexError('P-attribute offset out of bounds')
 *       return cl_cpos2str(self.att,offset)             # <<<<<<<<<<<<<<
 *     else:
 *       result=[]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_offset); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyBytes_FromString(cl_cpos2str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_t_7)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_r = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":212
 *       return cl_cpos2str(self.att,offset)
 *     else:
 *       result=[]             # <<<<<<<<<<<<<<
 *       if offset.start<0 or offset.stop<offset.start or offset.stop>len(self):
 *         raise IndexError('P-attribute offset out of bounds')
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":213
 *     else:
 *       result=[]
 *       if offset.start<0 or offset.stop<offset.start or offset.stop>len(self):             # <<<<<<<<<<<<<<
 *         raise IndexError('P-attribute offset out of bounds')
 *       for i from offset.start<=i<offset.stop:
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__stop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_LT); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_1) {
        __pyx_t_8 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = PyObject_Length(__pyx_v_self); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_t_2, Py_GT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __pyx_t_5;
      } else {
        __pyx_t_9 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_9;
    } else {
      __pyx_t_1 = __pyx_t_6;
    }
    if (__pyx_t_1) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":214
 *       result=[]
 *       if offset.start<0 or offset.stop<offset.start or offset.stop>len(self):
 *         raise IndexError('P-attribute offset out of bounds')             # <<<<<<<<<<<<<<
 *       for i from offset.start<=i<offset.stop:
 *         result.append(cl_cpos2str(self.att,i))
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_4));
      __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
      __pyx_t_2 = PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":215
 *       if offset.start<0 or offset.stop<offset.start or offset.stop>len(self):
 *         raise IndexError('P-attribute offset out of bounds')
 *       for i from offset.start<=i<offset.stop:             # <<<<<<<<<<<<<<
 *         result.append(cl_cpos2str(self.att,i))
 *       return result
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_offset, __pyx_n_s__stop); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (__pyx_v_i = __pyx_t_7; __pyx_v_i < __pyx_t_10; __pyx_v_i++) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":216
 *         raise IndexError('P-attribute offset out of bounds')
 *       for i from offset.start<=i<offset.stop:
 *         result.append(cl_cpos2str(self.att,i))             # <<<<<<<<<<<<<<
 *       return result
 *   cpdef cpos2id(self,int offset):
 */
      __pyx_t_2 = __Pyx_PyBytes_FromString(cl_cpos2str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_v_i)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_result, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":217
 *       for i from offset.start<=i<offset.stop:
 *         result.append(cl_cpos2str(self.att,i))
 *       return result             # <<<<<<<<<<<<<<
 *   cpdef cpos2id(self,int offset):
 *     return cl_cpos2id(self.att,offset)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_offset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":218
 *         result.append(cl_cpos2str(self.att,i))
 *       return result
 *   cpdef cpos2id(self,int offset):             # <<<<<<<<<<<<<<
 *     return cl_cpos2id(self.att,offset)
 *   def find(self,tag):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_cpos2id(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset); /*proto*/
static  PyObject *__pyx_f_3CWB_2CL_9PosAttrib_cpos2id(struct __pyx_obj_3CWB_2CL_PosAttrib *__pyx_v_self, int __pyx_v_offset, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("cpos2id");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__cpos2id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_3CWB_2CL_9PosAttrib_cpos2id)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_offset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":219
 *       return result
 *   cpdef cpos2id(self,int offset):
 *     return cl_cpos2id(self.att,offset)             # <<<<<<<<<<<<<<
 *   def find(self,tag):
 *     cdef int tagid
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cl_cpos2id(__pyx_v_self->att, __pyx_v_offset)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.cpos2id");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":218
 *         result.append(cl_cpos2str(self.att,i))
 *       return result
 *   cpdef cpos2id(self,int offset):             # <<<<<<<<<<<<<<
 *     return cl_cpos2id(self.att,offset)
 *   def find(self,tag):
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_cpos2id(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_cpos2id(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset) {
  int __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cpos2id");
  assert(__pyx_arg_offset); {
    __pyx_v_offset = __Pyx_PyInt_AsInt(__pyx_arg_offset); if (unlikely((__pyx_v_offset == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.PosAttrib.cpos2id");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3CWB_2CL_PosAttrib *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->__pyx_vtab)->cpos2id(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self), __pyx_v_offset, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.cpos2id");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":220
 *   cpdef cpos2id(self,int offset):
 *     return cl_cpos2id(self.att,offset)
 *   def find(self,tag):             # <<<<<<<<<<<<<<
 *     cdef int tagid
 *     cdef IDList lst
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find(PyObject *__pyx_v_self, PyObject *__pyx_v_tag); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find(PyObject *__pyx_v_self, PyObject *__pyx_v_tag) {
  int __pyx_v_tagid;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst;
  PyObject *__pyx_v_tag_s = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("find");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_tag);
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":223
 *     cdef int tagid
 *     cdef IDList lst
 *     cdef object tag_s=self.parent.to_str(tag)             # <<<<<<<<<<<<<<
 *     tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent->__pyx_vtab)->to_str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent, __pyx_v_tag, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tag_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":224
 *     cdef IDList lst
 *     cdef object tag_s=self.parent.to_str(tag)
 *     tagid=cl_str2id(self.att,tag_s)             # <<<<<<<<<<<<<<
 *     if tagid<0:
 *       raise KeyError
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_tag_s); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tagid = cl_str2id(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_t_2);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":225
 *     cdef object tag_s=self.parent.to_str(tag)
 *     tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:             # <<<<<<<<<<<<<<
 *       raise KeyError
 *     lst=IDList()
 */
  __pyx_t_3 = (__pyx_v_tagid < 0);
  if (__pyx_t_3) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":226
 *     tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:
 *       raise KeyError             # <<<<<<<<<<<<<<
 *     lst=IDList()
 *     lst.ids=cl_id2cpos(self.att,tagid,&lst.length)
 */
    __Pyx_Raise(__pyx_builtin_KeyError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":227
 *     if tagid<0:
 *       raise KeyError
 *     lst=IDList()             # <<<<<<<<<<<<<<
 *     lst.ids=cl_id2cpos(self.att,tagid,&lst.length)
 *     return lst
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_lst));
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":228
 *       raise KeyError
 *     lst=IDList()
 *     lst.ids=cl_id2cpos(self.att,tagid,&lst.length)             # <<<<<<<<<<<<<<
 *     return lst
 *   def find_list(self, tags):
 */
  __pyx_v_lst->ids = cl_id2cpos(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_v_tagid, (&__pyx_v_lst->length));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":229
 *     lst=IDList()
 *     lst.ids=cl_id2cpos(self.att,tagid,&lst.length)
 *     return lst             # <<<<<<<<<<<<<<
 *   def find_list(self, tags):
 *     cdef int tagid
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lst));
  __pyx_r = ((PyObject *)__pyx_v_lst);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.find");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_XDECREF(__pyx_v_tag_s);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_tag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":230
 *     lst.ids=cl_id2cpos(self.att,tagid,&lst.length)
 *     return lst
 *   def find_list(self, tags):             # <<<<<<<<<<<<<<
 *     cdef int tagid
 *     cdef bytes tag_s
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find_list(PyObject *__pyx_v_self, PyObject *__pyx_v_tags); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find_list(PyObject *__pyx_v_self, PyObject *__pyx_v_tags) {
  int __pyx_v_tagid;
  PyObject *__pyx_v_tag_s;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst_result;
  PyObject *__pyx_v_ids_set;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("find_list");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_tags);
  __pyx_v_tag_s = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_lst_result = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_ids_set = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_tag = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":234
 *     cdef bytes tag_s
 *     cdef IDList lst, lst_result
 *     ids_set=set()             # <<<<<<<<<<<<<<
 *     for tag in tags:
 *       tag_s=self.parent.to_str(tag)
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(__pyx_v_ids_set);
  __pyx_v_ids_set = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":235
 *     cdef IDList lst, lst_result
 *     ids_set=set()
 *     for tag in tags:             # <<<<<<<<<<<<<<
 *       tag_s=self.parent.to_str(tag)
 *       tagid=cl_str2id(self.att,tag_s)
 */
  if (PyList_CheckExact(__pyx_v_tags) || PyTuple_CheckExact(__pyx_v_tags)) {
    __pyx_t_2 = 0; __pyx_t_1 = __pyx_v_tags; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_tags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_1))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_1))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    } else {
      __pyx_t_3 = PyIter_Next(__pyx_t_1);
      if (!__pyx_t_3) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_v_tag);
    __pyx_v_tag = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":236
 *     ids_set=set()
 *     for tag in tags:
 *       tag_s=self.parent.to_str(tag)             # <<<<<<<<<<<<<<
 *       tagid=cl_str2id(self.att,tag_s)
 *       if tagid<0:
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent->__pyx_vtab)->to_str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent, __pyx_v_tag, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_v_tag_s));
    __pyx_v_tag_s = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":237
 *     for tag in tags:
 *       tag_s=self.parent.to_str(tag)
 *       tagid=cl_str2id(self.att,tag_s)             # <<<<<<<<<<<<<<
 *       if tagid<0:
 *         continue
 */
    __pyx_t_4 = __Pyx_PyBytes_AsString(((PyObject *)__pyx_v_tag_s)); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_tagid = cl_str2id(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_t_4);

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":238
 *       tag_s=self.parent.to_str(tag)
 *       tagid=cl_str2id(self.att,tag_s)
 *       if tagid<0:             # <<<<<<<<<<<<<<
 *         continue
 *       ids_set.add(tagid)
 */
    __pyx_t_5 = (__pyx_v_tagid < 0);
    if (__pyx_t_5) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":239
 *       tagid=cl_str2id(self.att,tag_s)
 *       if tagid<0:
 *         continue             # <<<<<<<<<<<<<<
 *       ids_set.add(tagid)
 *     lst=IDList(sorted(ids_set))
 */
      goto __pyx_L5_continue;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":240
 *       if tagid<0:
 *         continue
 *       ids_set.add(tagid)             # <<<<<<<<<<<<<<
 *     lst=IDList(sorted(ids_set))
 *     lst_result=IDList()
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_ids_set, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyInt_FromLong(__pyx_v_tagid); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":241
 *         continue
 *       ids_set.add(tagid)
 *     lst=IDList(sorted(ids_set))             # <<<<<<<<<<<<<<
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_ids_set);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ids_set);
  __Pyx_GIVEREF(__pyx_v_ids_set);
  __pyx_t_6 = PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_lst));
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":242
 *       ids_set.add(tagid)
 *     lst=IDList(sorted(ids_set))
 *     lst_result=IDList()             # <<<<<<<<<<<<<<
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result
 */
  __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(((PyObject *)__pyx_v_lst_result));
  __pyx_v_lst_result = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":243
 *     lst=IDList(sorted(ids_set))
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)             # <<<<<<<<<<<<<<
 *     return lst_result
 *   def find_pattern(self, pat, flags=0):
 */
  __pyx_v_lst_result->ids = cl_idlist2cpos(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_v_lst->ids, __pyx_v_lst->length, 1, (&__pyx_v_lst_result->length));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":244
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result             # <<<<<<<<<<<<<<
 *   def find_pattern(self, pat, flags=0):
 *     cdef IDList lst, lst_result
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lst_result));
  __pyx_r = ((PyObject *)__pyx_v_lst_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.find_list");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_tag_s);
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_DECREF((PyObject *)__pyx_v_lst_result);
  __Pyx_DECREF(__pyx_v_ids_set);
  __Pyx_DECREF(__pyx_v_tag);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":245
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result
 *   def find_pattern(self, pat, flags=0):             # <<<<<<<<<<<<<<
 *     cdef IDList lst, lst_result
 *     cdef bytes pat_s=self.parent.to_str(pat)
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find_pattern(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_find_pattern(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pat = 0;
  PyObject *__pyx_v_flags = 0;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst_result;
  PyObject *__pyx_v_pat_s = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pat,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("find_pattern");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pat);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "find_pattern") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pat = values[0];
    __pyx_v_flags = values[1];
  } else {
    __pyx_v_flags = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_flags = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_pat = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_pattern", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.PosAttrib.find_pattern");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_lst_result = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":247
 *   def find_pattern(self, pat, flags=0):
 *     cdef IDList lst, lst_result
 *     cdef bytes pat_s=self.parent.to_str(pat)             # <<<<<<<<<<<<<<
 *     lst=IDList()
 *     lst.ids=collect_matching_ids(self.att, pat_s, flags, &lst.length)
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent->__pyx_vtab)->to_str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent, __pyx_v_pat, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pat_s = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":248
 *     cdef IDList lst, lst_result
 *     cdef bytes pat_s=self.parent.to_str(pat)
 *     lst=IDList()             # <<<<<<<<<<<<<<
 *     lst.ids=collect_matching_ids(self.att, pat_s, flags, &lst.length)
 *     lst_result=IDList()
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_lst));
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":249
 *     cdef bytes pat_s=self.parent.to_str(pat)
 *     lst=IDList()
 *     lst.ids=collect_matching_ids(self.att, pat_s, flags, &lst.length)             # <<<<<<<<<<<<<<
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(((PyObject *)__pyx_v_pat_s)); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_flags); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_lst->ids = collect_matching_ids(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_t_2, __pyx_t_3, (&__pyx_v_lst->length));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":250
 *     lst=IDList()
 *     lst.ids=collect_matching_ids(self.att, pat_s, flags, &lst.length)
 *     lst_result=IDList()             # <<<<<<<<<<<<<<
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_lst_result));
  __pyx_v_lst_result = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":251
 *     lst.ids=collect_matching_ids(self.att, pat_s, flags, &lst.length)
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)             # <<<<<<<<<<<<<<
 *     return lst_result
 *   def frequency(self, tag):
 */
  __pyx_v_lst_result->ids = cl_idlist2cpos(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_v_lst->ids, __pyx_v_lst->length, 1, (&__pyx_v_lst_result->length));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":252
 *     lst_result=IDList()
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result             # <<<<<<<<<<<<<<
 *   def frequency(self, tag):
 *     cdef bytes tag_s=self.parent.to_str(tag)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lst_result));
  __pyx_r = ((PyObject *)__pyx_v_lst_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.find_pattern");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_DECREF((PyObject *)__pyx_v_lst_result);
  __Pyx_XDECREF(__pyx_v_pat_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":253
 *     lst_result.ids=cl_idlist2cpos(self.att, lst.ids, lst.length, 1, &lst_result.length)
 *     return lst_result
 *   def frequency(self, tag):             # <<<<<<<<<<<<<<
 *     cdef bytes tag_s=self.parent.to_str(tag)
 *     cdef int tagid=cl_str2id(self.att,tag_s)
 */

static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_tag); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_9PosAttrib_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_tag) {
  PyObject *__pyx_v_tag_s = 0;
  int __pyx_v_tagid;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("frequency");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_tag);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":254
 *     return lst_result
 *   def frequency(self, tag):
 *     cdef bytes tag_s=self.parent.to_str(tag)             # <<<<<<<<<<<<<<
 *     cdef int tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3CWB_2CL_Corpus *)((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent->__pyx_vtab)->to_str(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->parent, __pyx_v_tag, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tag_s = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":255
 *   def frequency(self, tag):
 *     cdef bytes tag_s=self.parent.to_str(tag)
 *     cdef int tagid=cl_str2id(self.att,tag_s)             # <<<<<<<<<<<<<<
 *     if tagid<0:
 *       raise KeyError(cdperror_string(tagid))
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(((PyObject *)__pyx_v_tag_s)); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tagid = cl_str2id(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_t_2);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":256
 *     cdef bytes tag_s=self.parent.to_str(tag)
 *     cdef int tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:             # <<<<<<<<<<<<<<
 *       raise KeyError(cdperror_string(tagid))
 *     return cl_id2freq(self.att,tagid)
 */
  __pyx_t_3 = (__pyx_v_tagid < 0);
  if (__pyx_t_3) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":257
 *     cdef int tagid=cl_str2id(self.att,tag_s)
 *     if tagid<0:
 *       raise KeyError(cdperror_string(tagid))             # <<<<<<<<<<<<<<
 *     return cl_id2freq(self.att,tagid)
 *   def __len__(self):
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(cdperror_string(__pyx_v_tagid)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":258
 *     if tagid<0:
 *       raise KeyError(cdperror_string(tagid))
 *     return cl_id2freq(self.att,tagid)             # <<<<<<<<<<<<<<
 *   def __len__(self):
 *     return cl_max_cpos(self.att)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cl_id2freq(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att, __pyx_v_tagid)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.PosAttrib.frequency");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag_s);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_tag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":259
 *       raise KeyError(cdperror_string(tagid))
 *     return cl_id2freq(self.att,tagid)
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return cl_max_cpos(self.att)
 * 
 */

static Py_ssize_t __pyx_pf_3CWB_2CL_9PosAttrib___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_3CWB_2CL_9PosAttrib___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":260
 *     return cl_id2freq(self.att,tagid)
 *   def __len__(self):
 *     return cl_max_cpos(self.att)             # <<<<<<<<<<<<<<
 * 
 * cdef class AttrDictionary:
 */
  __pyx_r = cl_max_cpos(((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_self)->att);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":264
 * cdef class AttrDictionary:
 *   cdef PosAttrib attr
 *   def __cinit__(self,d):             # <<<<<<<<<<<<<<
 *     self.attr=d
 *   def __len__(self):
 */

static int __pyx_pf_3CWB_2CL_14AttrDictionary___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_14AttrDictionary___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d = 0;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__d,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__d);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_d = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_d = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":265
 *   cdef PosAttrib attr
 *   def __cinit__(self,d):
 *     self.attr=d             # <<<<<<<<<<<<<<
 *   def __len__(self):
 *     return cl_max_id(self.attr.att)
 */
  if (!(likely(((__pyx_v_d) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_d, __pyx_ptype_3CWB_2CL_PosAttrib))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_d);
  __Pyx_GIVEREF(__pyx_v_d);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr));
  ((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr = ((struct __pyx_obj_3CWB_2CL_PosAttrib *)__pyx_v_d);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":266
 *   def __cinit__(self,d):
 *     self.attr=d
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return cl_max_id(self.attr.att)
 *   def __getitem__(self,s):
 */

static Py_ssize_t __pyx_pf_3CWB_2CL_14AttrDictionary___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_3CWB_2CL_14AttrDictionary___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":267
 *     self.attr=d
 *   def __len__(self):
 *     return cl_max_id(self.attr.att)             # <<<<<<<<<<<<<<
 *   def __getitem__(self,s):
 *     cdef int val
 */
  __pyx_r = cl_max_id(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr->att);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":268
 *   def __len__(self):
 *     return cl_max_id(self.attr.att)
 *   def __getitem__(self,s):             # <<<<<<<<<<<<<<
 *     cdef int val
 *     val=cl_str2id(self.attr.att,s)
 */

static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  int __pyx_v_val;
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__getitem__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_s);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":270
 *   def __getitem__(self,s):
 *     cdef int val
 *     val=cl_str2id(self.attr.att,s)             # <<<<<<<<<<<<<<
 *     if val>=0:
 *       return val
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_val = cl_str2id(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr->att, __pyx_t_1);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":271
 *     cdef int val
 *     val=cl_str2id(self.attr.att,s)
 *     if val>=0:             # <<<<<<<<<<<<<<
 *       return val
 *     else:
 */
  __pyx_t_2 = (__pyx_v_val >= 0);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":272
 *     val=cl_str2id(self.attr.att,s)
 *     if val>=0:
 *       return val             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError(cdperror_string(val))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":274
 *       return val
 *     else:
 *       raise KeyError(cdperror_string(val))             # <<<<<<<<<<<<<<
 *   def get_word(self,n):
 *     cdef char *s
 */
    __pyx_t_3 = __Pyx_PyBytes_FromString(cdperror_string(__pyx_v_val)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":275
 *     else:
 *       raise KeyError(cdperror_string(val))
 *   def get_word(self,n):             # <<<<<<<<<<<<<<
 *     cdef char *s
 *     s=cl_id2str(self.attr.att,n)
 */

static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_get_word(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_get_word(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_word");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":277
 *   def get_word(self,n):
 *     cdef char *s
 *     s=cl_id2str(self.attr.att,n)             # <<<<<<<<<<<<<<
 *     return s
 *   def get_matching(self,pat,flags=0):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s = cl_id2str(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr->att, __pyx_t_1);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":278
 *     cdef char *s
 *     s=cl_id2str(self.attr.att,n)
 *     return s             # <<<<<<<<<<<<<<
 *   def get_matching(self,pat,flags=0):
 *     cdef IDList lst
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.get_word");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":279
 *     s=cl_id2str(self.attr.att,n)
 *     return s
 *   def get_matching(self,pat,flags=0):             # <<<<<<<<<<<<<<
 *     cdef IDList lst
 *     lst=IDList()
 */

static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_get_matching(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_get_matching(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pat = 0;
  PyObject *__pyx_v_flags = 0;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pat,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("get_matching");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pat);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_matching") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pat = values[0];
    __pyx_v_flags = values[1];
  } else {
    __pyx_v_flags = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_flags = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_pat = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_matching", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.get_matching");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":281
 *   def get_matching(self,pat,flags=0):
 *     cdef IDList lst
 *     lst=IDList()             # <<<<<<<<<<<<<<
 *     lst.ids=collect_matching_ids(self.attr.att,pat,flags,&lst.length)
 *     return lst
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_lst));
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":282
 *     cdef IDList lst
 *     lst=IDList()
 *     lst.ids=collect_matching_ids(self.attr.att,pat,flags,&lst.length)             # <<<<<<<<<<<<<<
 *     return lst
 *   def expand_pattern(self,pat,flags=0):
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_pat); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_flags); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_lst->ids = collect_matching_ids(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr->att, __pyx_t_2, __pyx_t_3, (&__pyx_v_lst->length));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":283
 *     lst=IDList()
 *     lst.ids=collect_matching_ids(self.attr.att,pat,flags,&lst.length)
 *     return lst             # <<<<<<<<<<<<<<
 *   def expand_pattern(self,pat,flags=0):
 *     cdef IDList lst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lst));
  __pyx_r = ((PyObject *)__pyx_v_lst);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.get_matching");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":284
 *     lst.ids=collect_matching_ids(self.attr.att,pat,flags,&lst.length)
 *     return lst
 *   def expand_pattern(self,pat,flags=0):             # <<<<<<<<<<<<<<
 *     cdef IDList lst
 *     cdef i
 */

static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_expand_pattern(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_14AttrDictionary_expand_pattern(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pat = 0;
  PyObject *__pyx_v_flags = 0;
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_lst;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pat,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("expand_pattern");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pat);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "expand_pattern") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pat = values[0];
    __pyx_v_flags = values[1];
  } else {
    __pyx_v_flags = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_flags = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_pat = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("expand_pattern", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.expand_pattern");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_pat);
  __Pyx_INCREF(__pyx_v_flags);
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_result = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":287
 *     cdef IDList lst
 *     cdef i
 *     result=[]             # <<<<<<<<<<<<<<
 *     lst=self.get_matching(pat)
 *     for i from 0<=i<lst.length:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(__pyx_v_result);
  __pyx_v_result = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":288
 *     cdef i
 *     result=[]
 *     lst=self.get_matching(pat)             # <<<<<<<<<<<<<<
 *     for i from 0<=i<lst.length:
 *       result.append(cl_id2str(self.attr.att,lst.ids[i]))
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_matching); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_pat);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pat);
  __Pyx_GIVEREF(__pyx_v_pat);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_3CWB_2CL_IDList))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_v_lst));
  __pyx_v_lst = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":289
 *     result=[]
 *     lst=self.get_matching(pat)
 *     for i from 0<=i<lst.length:             # <<<<<<<<<<<<<<
 *       result.append(cl_id2str(self.attr.att,lst.ids[i]))
 *     return result
 */
  __pyx_t_4 = __pyx_v_lst->length;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = PyInt_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":290
 *     lst=self.get_matching(pat)
 *     for i from 0<=i<lst.length:
 *       result.append(cl_id2str(self.attr.att,lst.ids[i]))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBytes_FromString(cl_id2str(((struct __pyx_obj_3CWB_2CL_AttrDictionary *)__pyx_v_self)->attr->att, (__pyx_v_lst->ids[__pyx_t_6]))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_2 = __Pyx_PyObject_Append(__pyx_v_result, ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyInt_AsLong(__pyx_v_i); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":289
 *     result=[]
 *     lst=self.get_matching(pat)
 *     for i from 0<=i<lst.length:             # <<<<<<<<<<<<<<
 *       result.append(cl_id2str(self.attr.att,lst.ids[i]))
 *     return result
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_i);
  __pyx_v_i = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":291
 *     for i from 0<=i<lst.length:
 *       result.append(cl_id2str(self.attr.att,lst.ids[i]))
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef class AttStruc:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.AttrDictionary.expand_pattern");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_pat);
  __Pyx_DECREF(__pyx_v_flags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":294
 * 
 * cdef class AttStruc:
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "CWB.CL.AttrStruct(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":295
 * cdef class AttStruc:
 *   def __repr__(self):
 *     return "CWB.CL.AttrStruct(%s,'%s')"%(self.parent,self.attname)             # <<<<<<<<<<<<<<
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent));
  __Pyx_GIVEREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent));
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  __Pyx_GIVEREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_5), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CWB.CL.AttStruc.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":296
 *   def __repr__(self):
 *     return "CWB.CL.AttrStruct(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):             # <<<<<<<<<<<<<<
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_STRUC)
 */

static int __pyx_pf_3CWB_2CL_8AttStruc___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_8AttStruc___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_parent = 0;
  PyObject *__pyx_v_attname = 0;
  int __pyx_r;
  char *__pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__attname,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__attname);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)values[0]);
    __pyx_v_attname = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_attname = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.AttStruc.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_parent);
  __Pyx_INCREF(__pyx_v_attname);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_3CWB_2CL_Corpus, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":297
 *     return "CWB.CL.AttrStruct(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent             # <<<<<<<<<<<<<<
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_STRUC)
 *     if self.att==NULL:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent));
  ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->parent = __pyx_v_parent;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":298
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_STRUC)             # <<<<<<<<<<<<<<
 *     if self.att==NULL:
 *       raise KeyError
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_attname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att = cl_new_attribute(__pyx_v_parent->corpus, __pyx_t_1, ATT_STRUC);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":299
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_STRUC)
 *     if self.att==NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)
 */
  __pyx_t_2 = (((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att == NULL);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":300
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_STRUC)
 *     if self.att==NULL:
 *       raise KeyError             # <<<<<<<<<<<<<<
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname
 */
    __Pyx_Raise(__pyx_builtin_KeyError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":301
 *     if self.att==NULL:
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)             # <<<<<<<<<<<<<<
 *     self.attname=attname
 *   def getName(self):
 */
  ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->has_values = cl_struc_values(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":302
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname             # <<<<<<<<<<<<<<
 *   def getName(self):
 *     return self.attname
 */
  __Pyx_INCREF(__pyx_v_attname);
  __Pyx_GIVEREF(__pyx_v_attname);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname = __pyx_v_attname;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CWB.CL.AttStruc.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_parent);
  __Pyx_DECREF(__pyx_v_attname);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":303
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname
 *   def getName(self):             # <<<<<<<<<<<<<<
 *     return self.attname
 *   def find_all(self,tags):
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_getName(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_getName(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("getName");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":304
 *     self.attname=attname
 *   def getName(self):
 *     return self.attname             # <<<<<<<<<<<<<<
 *   def find_all(self,tags):
 *     # s-attr string attributes are not indexed
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname);
  __pyx_r = ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->attname;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":305
 *   def getName(self):
 *     return self.attname
 *   def find_all(self,tags):             # <<<<<<<<<<<<<<
 *     # s-attr string attributes are not indexed
 *     # so we just do the stupid thing here.
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_find_all(PyObject *__pyx_v_self, PyObject *__pyx_v_tags); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_find_all(PyObject *__pyx_v_self, PyObject *__pyx_v_tags) {
  int __pyx_v_i;
  PyObject *__pyx_v_strucs;
  PyObject *__pyx_v_struc_id;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("find_all");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_tags);
  __pyx_v_strucs = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_struc_id = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":309
 *     # so we just do the stupid thing here.
 *     cdef int i
 *     strucs=[]             # <<<<<<<<<<<<<<
 *     if not self.has_values: raise TypeError
 *     for i from 0<=i<cl_max_struc(self.att):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(__pyx_v_strucs);
  __pyx_v_strucs = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":310
 *     cdef int i
 *     strucs=[]
 *     if not self.has_values: raise TypeError             # <<<<<<<<<<<<<<
 *     for i from 0<=i<cl_max_struc(self.att):
 *       struc_id=cl_struc2str(self.att,i)
 */
  __pyx_t_2 = (!((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->has_values);
  if (__pyx_t_2) {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":311
 *     strucs=[]
 *     if not self.has_values: raise TypeError
 *     for i from 0<=i<cl_max_struc(self.att):             # <<<<<<<<<<<<<<
 *       struc_id=cl_struc2str(self.att,i)
 *       if struc_id in tags:
 */
  __pyx_t_3 = cl_max_struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att);
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_3; __pyx_v_i++) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":312
 *     if not self.has_values: raise TypeError
 *     for i from 0<=i<cl_max_struc(self.att):
 *       struc_id=cl_struc2str(self.att,i)             # <<<<<<<<<<<<<<
 *       if struc_id in tags:
 *         strucs.append(i)
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(cl_struc2str(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, __pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(__pyx_v_struc_id);
    __pyx_v_struc_id = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":313
 *     for i from 0<=i<cl_max_struc(self.att):
 *       struc_id=cl_struc2str(self.att,i)
 *       if struc_id in tags:             # <<<<<<<<<<<<<<
 *         strucs.append(i)
 *     return strucs
 */
    __pyx_t_2 = ((PySequence_Contains(__pyx_v_tags, __pyx_v_struc_id))); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":314
 *       struc_id=cl_struc2str(self.att,i)
 *       if struc_id in tags:
 *         strucs.append(i)             # <<<<<<<<<<<<<<
 *     return strucs
 *   def find_pos(self,offset):
 */
      __pyx_t_1 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_strucs, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":315
 *       if struc_id in tags:
 *         strucs.append(i)
 *     return strucs             # <<<<<<<<<<<<<<
 *   def find_pos(self,offset):
 *     return self[cl_cpos2struc(self.att,offset)]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_strucs);
  __pyx_r = __pyx_v_strucs;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.AttStruc.find_all");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_strucs);
  __Pyx_DECREF(__pyx_v_struc_id);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":316
 *         strucs.append(i)
 *     return strucs
 *   def find_pos(self,offset):             # <<<<<<<<<<<<<<
 *     return self[cl_cpos2struc(self.att,offset)]
 *   def cpos2struc(self,offset):
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_find_pos(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_find_pos(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("find_pos");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":317
 *     return strucs
 *   def find_pos(self,offset):
 *     return self[cl_cpos2struc(self.att,offset)]             # <<<<<<<<<<<<<<
 *   def cpos2struc(self,offset):
 *     cdef int val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_offset); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = cl_cpos2struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, __pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CWB.CL.AttStruc.find_pos");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":318
 *   def find_pos(self,offset):
 *     return self[cl_cpos2struc(self.att,offset)]
 *   def cpos2struc(self,offset):             # <<<<<<<<<<<<<<
 *     cdef int val
 *     val=cl_cpos2struc(self.att,offset)
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_cpos2struc(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_cpos2struc(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  int __pyx_v_val;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("cpos2struc");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_offset);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":320
 *   def cpos2struc(self,offset):
 *     cdef int val
 *     val=cl_cpos2struc(self.att,offset)             # <<<<<<<<<<<<<<
 *     if val==CDA_ESTRUC:
 *       raise KeyError("no structure at this position")
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_offset); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_val = cl_cpos2struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, __pyx_t_1);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":321
 *     cdef int val
 *     val=cl_cpos2struc(self.att,offset)
 *     if val==CDA_ESTRUC:             # <<<<<<<<<<<<<<
 *       raise KeyError("no structure at this position")
 *     return val
 */
  __pyx_t_2 = (__pyx_v_val == CDA_ESTRUC);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":322
 *     val=cl_cpos2struc(self.att,offset)
 *     if val==CDA_ESTRUC:
 *       raise KeyError("no structure at this position")             # <<<<<<<<<<<<<<
 *     return val
 *   def map_idlist(self, IDList lst not None):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_6));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":323
 *     if val==CDA_ESTRUC:
 *       raise KeyError("no structure at this position")
 *     return val             # <<<<<<<<<<<<<<
 *   def map_idlist(self, IDList lst not None):
 *     """returns an IDList with (unique) struc offsets instead of
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.AttStruc.cpos2struc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_offset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":324
 *       raise KeyError("no structure at this position")
 *     return val
 *   def map_idlist(self, IDList lst not None):             # <<<<<<<<<<<<<<
 *     """returns an IDList with (unique) struc offsets instead of
 *        corpus positions"""
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_map_idlist(PyObject *__pyx_v_self, PyObject *__pyx_v_lst); /*proto*/
static char __pyx_doc_3CWB_2CL_8AttStruc_map_idlist[] = "returns an IDList with (unique) struc offsets instead of\n       corpus positions";
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc_map_idlist(PyObject *__pyx_v_self, PyObject *__pyx_v_lst) {
  struct __pyx_obj_3CWB_2CL_IDList *__pyx_v_result = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_val;
  int __pyx_v_lastval;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("map_idlist");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_lst);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lst), __pyx_ptype_3CWB_2CL_IDList, 0, "lst", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":327
 *     """returns an IDList with (unique) struc offsets instead of
 *        corpus positions"""
 *     cdef IDList result=IDList()             # <<<<<<<<<<<<<<
 *     cdef int i, k, val, lastval
 *     result.ids=<int *>malloc(lst.length*sizeof(int))
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_IDList)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":329
 *     cdef IDList result=IDList()
 *     cdef int i, k, val, lastval
 *     result.ids=<int *>malloc(lst.length*sizeof(int))             # <<<<<<<<<<<<<<
 *     k=0
 *     lastval=-1
 */
  __pyx_v_result->ids = ((int *)malloc((((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_lst)->length * (sizeof(int)))));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":330
 *     cdef int i, k, val, lastval
 *     result.ids=<int *>malloc(lst.length*sizeof(int))
 *     k=0             # <<<<<<<<<<<<<<
 *     lastval=-1
 *     for i from 0<=i<lst.length:
 */
  __pyx_v_k = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":331
 *     result.ids=<int *>malloc(lst.length*sizeof(int))
 *     k=0
 *     lastval=-1             # <<<<<<<<<<<<<<
 *     for i from 0<=i<lst.length:
 *       val=cl_cpos2struc(self.att,lst.ids[i])
 */
  __pyx_v_lastval = -1;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":332
 *     k=0
 *     lastval=-1
 *     for i from 0<=i<lst.length:             # <<<<<<<<<<<<<<
 *       val=cl_cpos2struc(self.att,lst.ids[i])
 *       if val>=0 and val!=lastval:
 */
  __pyx_t_2 = ((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_lst)->length;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":333
 *     lastval=-1
 *     for i from 0<=i<lst.length:
 *       val=cl_cpos2struc(self.att,lst.ids[i])             # <<<<<<<<<<<<<<
 *       if val>=0 and val!=lastval:
 *         result.ids[k]=val
 */
    __pyx_v_val = cl_cpos2struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, (((struct __pyx_obj_3CWB_2CL_IDList *)__pyx_v_lst)->ids[__pyx_v_i]));

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":334
 *     for i from 0<=i<lst.length:
 *       val=cl_cpos2struc(self.att,lst.ids[i])
 *       if val>=0 and val!=lastval:             # <<<<<<<<<<<<<<
 *         result.ids[k]=val
 *         k+=1
 */
    __pyx_t_3 = (__pyx_v_val >= 0);
    if (__pyx_t_3) {
      __pyx_t_4 = (__pyx_v_val != __pyx_v_lastval);
      __pyx_t_5 = __pyx_t_4;
    } else {
      __pyx_t_5 = __pyx_t_3;
    }
    if (__pyx_t_5) {

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":335
 *       val=cl_cpos2struc(self.att,lst.ids[i])
 *       if val>=0 and val!=lastval:
 *         result.ids[k]=val             # <<<<<<<<<<<<<<
 *         k+=1
 *         lastval=val
 */
      (__pyx_v_result->ids[__pyx_v_k]) = __pyx_v_val;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":336
 *       if val>=0 and val!=lastval:
 *         result.ids[k]=val
 *         k+=1             # <<<<<<<<<<<<<<
 *         lastval=val
 *     result.length=k
 */
      __pyx_v_k += 1;

      /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":337
 *         result.ids[k]=val
 *         k+=1
 *         lastval=val             # <<<<<<<<<<<<<<
 *     result.length=k
 *     return result
 */
      __pyx_v_lastval = __pyx_v_val;
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":338
 *         k+=1
 *         lastval=val
 *     result.length=k             # <<<<<<<<<<<<<<
 *     return result
 *   def __getitem__(self,index):
 */
  __pyx_v_result->length = __pyx_v_k;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":339
 *         lastval=val
 *     result.length=k
 *     return result             # <<<<<<<<<<<<<<
 *   def __getitem__(self,index):
 *     cdef int start, end
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CWB.CL.AttStruc.map_idlist");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_lst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":340
 *     result.length=k
 *     return result
 *   def __getitem__(self,index):             # <<<<<<<<<<<<<<
 *     cdef int start, end
 *     if index<0 or index>=cl_max_struc(self.att):
 */

static PyObject *__pyx_pf_3CWB_2CL_8AttStruc___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_8AttStruc___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v_start;
  int __pyx_v_end;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__getitem__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_index);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":342
 *   def __getitem__(self,index):
 *     cdef int start, end
 *     if index<0 or index>=cl_max_struc(self.att):             # <<<<<<<<<<<<<<
 *        raise IndexError
 *     cl_struc2cpos(self.att,index,&start,&end)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_index, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_1 = PyInt_FromLong(cl_max_struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_index, __pyx_t_1, Py_GE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_2;
  }
  if (__pyx_t_5) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":343
 *     cdef int start, end
 *     if index<0 or index>=cl_max_struc(self.att):
 *        raise IndexError             # <<<<<<<<<<<<<<
 *     cl_struc2cpos(self.att,index,&start,&end)
 *     if self.has_values:
 */
    __Pyx_Raise(__pyx_builtin_IndexError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":344
 *     if index<0 or index>=cl_max_struc(self.att):
 *        raise IndexError
 *     cl_struc2cpos(self.att,index,&start,&end)             # <<<<<<<<<<<<<<
 *     if self.has_values:
 *       return (start,end,cl_struc2str(self.att,index))
 */
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cl_struc2cpos(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, __pyx_t_6, (&__pyx_v_start), (&__pyx_v_end));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":345
 *        raise IndexError
 *     cl_struc2cpos(self.att,index,&start,&end)
 *     if self.has_values:             # <<<<<<<<<<<<<<
 *       return (start,end,cl_struc2str(self.att,index))
 *     else:
 */
  __pyx_t_5 = ((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->has_values;
  if (__pyx_t_5) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":346
 *     cl_struc2cpos(self.att,index,&start,&end)
 *     if self.has_values:
 *       return (start,end,cl_struc2str(self.att,index))             # <<<<<<<<<<<<<<
 *     else:
 *       return (start,end)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyInt_FromLong(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyInt_FromLong(__pyx_v_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __Pyx_PyBytes_FromString(cl_struc2str(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att, __pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 2, ((PyObject *)__pyx_t_7));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":348
 *       return (start,end,cl_struc2str(self.att,index))
 *     else:
 *       return (start,end)             # <<<<<<<<<<<<<<
 *   def __len__(self):
 *     return cl_max_struc(self.att)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyInt_FromLong(__pyx_v_start); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyInt_FromLong(__pyx_v_end); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("CWB.CL.AttStruc.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":349
 *     else:
 *       return (start,end)
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return cl_max_struc(self.att)
 * 
 */

static Py_ssize_t __pyx_pf_3CWB_2CL_8AttStruc___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_3CWB_2CL_8AttStruc___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":350
 *       return (start,end)
 *   def __len__(self):
 *     return cl_max_struc(self.att)             # <<<<<<<<<<<<<<
 * 
 * cdef class AlignAttrib:
 */
  __pyx_r = cl_max_struc(((struct __pyx_obj_3CWB_2CL_AttStruc *)__pyx_v_self)->att);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":353
 * 
 * cdef class AlignAttrib:
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "CWB.CL.AlignAttrib(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 */

static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":354
 * cdef class AlignAttrib:
 *   def __repr__(self):
 *     return "CWB.CL.AlignAttrib(%s,'%s')"%(self.parent,self.attname)             # <<<<<<<<<<<<<<
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent));
  __Pyx_GIVEREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent));
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  __Pyx_GIVEREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_7), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CWB.CL.AlignAttrib.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":355
 *   def __repr__(self):
 *     return "CWB.CL.AlignAttrib(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):             # <<<<<<<<<<<<<<
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_ALIGN)
 */

static int __pyx_pf_3CWB_2CL_11AlignAttrib___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3CWB_2CL_11AlignAttrib___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_parent = 0;
  PyObject *__pyx_v_attname = 0;
  int __pyx_r;
  char *__pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__attname,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__attname);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)values[0]);
    __pyx_v_attname = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_attname = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CWB.CL.AlignAttrib.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF((PyObject *)__pyx_v_parent);
  __Pyx_INCREF(__pyx_v_attname);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_3CWB_2CL_Corpus, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":356
 *     return "CWB.CL.AlignAttrib(%s,'%s')"%(self.parent,self.attname)
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent             # <<<<<<<<<<<<<<
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_ALIGN)
 *     if self.att==NULL:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent));
  ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->parent = __pyx_v_parent;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":357
 *   def __cinit__(self,Corpus parent,attname):
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_ALIGN)             # <<<<<<<<<<<<<<
 *     if self.att==NULL:
 *       raise KeyError
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_attname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att = cl_new_attribute(__pyx_v_parent->corpus, __pyx_t_1, ATT_ALIGN);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":358
 *     self.parent=parent
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_ALIGN)
 *     if self.att==NULL:             # <<<<<<<<<<<<<<
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)
 */
  __pyx_t_2 = (((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att == NULL);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":359
 *     self.att=cl_new_attribute(parent.corpus,attname,ATT_ALIGN)
 *     if self.att==NULL:
 *       raise KeyError             # <<<<<<<<<<<<<<
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname
 */
    __Pyx_Raise(__pyx_builtin_KeyError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":360
 *     if self.att==NULL:
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)             # <<<<<<<<<<<<<<
 *     self.attname=attname
 *   def getName(self):
 */
  ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->has_values = cl_struc_values(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":361
 *       raise KeyError
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname             # <<<<<<<<<<<<<<
 *   def getName(self):
 *     return self.attname
 */
  __Pyx_INCREF(__pyx_v_attname);
  __Pyx_GIVEREF(__pyx_v_attname);
  __Pyx_GOTREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  __Pyx_DECREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname = __pyx_v_attname;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CWB.CL.AlignAttrib.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF((PyObject *)__pyx_v_parent);
  __Pyx_DECREF(__pyx_v_attname);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":362
 *     self.has_values=cl_struc_values(self.att)
 *     self.attname=attname
 *   def getName(self):             # <<<<<<<<<<<<<<
 *     return self.attname
 *   def cpos2alg(self,cpos):
 */

static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib_getName(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib_getName(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("getName");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":363
 *     self.attname=attname
 *   def getName(self):
 *     return self.attname             # <<<<<<<<<<<<<<
 *   def cpos2alg(self,cpos):
 *     cdef int val
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname);
  __pyx_r = ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->attname;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":364
 *   def getName(self):
 *     return self.attname
 *   def cpos2alg(self,cpos):             # <<<<<<<<<<<<<<
 *     cdef int val
 *     val=cl_cpos2alg(self.att,cpos)
 */

static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib_cpos2alg(PyObject *__pyx_v_self, PyObject *__pyx_v_cpos); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib_cpos2alg(PyObject *__pyx_v_self, PyObject *__pyx_v_cpos) {
  int __pyx_v_val;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("cpos2alg");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_cpos);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":366
 *   def cpos2alg(self,cpos):
 *     cdef int val
 *     val=cl_cpos2alg(self.att,cpos)             # <<<<<<<<<<<<<<
 *     if val==CDA_EALIGN:
 *       raise KeyError("no alignment at this position")
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_cpos); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_val = cl_cpos2alg(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att, __pyx_t_1);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":367
 *     cdef int val
 *     val=cl_cpos2alg(self.att,cpos)
 *     if val==CDA_EALIGN:             # <<<<<<<<<<<<<<
 *       raise KeyError("no alignment at this position")
 *     return val
 */
  __pyx_t_2 = (__pyx_v_val == CDA_EALIGN);
  if (__pyx_t_2) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":368
 *     val=cl_cpos2alg(self.att,cpos)
 *     if val==CDA_EALIGN:
 *       raise KeyError("no alignment at this position")             # <<<<<<<<<<<<<<
 *     return val
 *   def __getitem__(self,index):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_8));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":369
 *     if val==CDA_EALIGN:
 *       raise KeyError("no alignment at this position")
 *     return val             # <<<<<<<<<<<<<<
 *   def __getitem__(self,index):
 *     cdef int start_a,end_a,start_b,end_b
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.AlignAttrib.cpos2alg");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_cpos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":370
 *       raise KeyError("no alignment at this position")
 *     return val
 *   def __getitem__(self,index):             # <<<<<<<<<<<<<<
 *     cdef int start_a,end_a,start_b,end_b
 *     if index<0 or index>=cl_max_alg(self.att):
 */

static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_11AlignAttrib___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v_start_a;
  int __pyx_v_end_a;
  int __pyx_v_start_b;
  int __pyx_v_end_b;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__getitem__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_index);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":372
 *   def __getitem__(self,index):
 *     cdef int start_a,end_a,start_b,end_b
 *     if index<0 or index>=cl_max_alg(self.att):             # <<<<<<<<<<<<<<
 *       raise IndexError
 *     cl_alg2cpos(self.att,index,
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_index, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_1 = PyInt_FromLong(cl_max_alg(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_index, __pyx_t_1, Py_GE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_2;
  }
  if (__pyx_t_5) {

    /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":373
 *     cdef int start_a,end_a,start_b,end_b
 *     if index<0 or index>=cl_max_alg(self.att):
 *       raise IndexError             # <<<<<<<<<<<<<<
 *     cl_alg2cpos(self.att,index,
 *                 &start_a,&end_a,
 */
    __Pyx_Raise(__pyx_builtin_IndexError, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":374
 *     if index<0 or index>=cl_max_alg(self.att):
 *       raise IndexError
 *     cl_alg2cpos(self.att,index,             # <<<<<<<<<<<<<<
 *                 &start_a,&end_a,
 *                 &start_b,&end_b)
 */
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":376
 *     cl_alg2cpos(self.att,index,
 *                 &start_a,&end_a,
 *                 &start_b,&end_b)             # <<<<<<<<<<<<<<
 *     return (start_a,end_a,start_b,end_b)
 *   def __len__(self):
 */
  cl_alg2cpos(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att, __pyx_t_6, (&__pyx_v_start_a), (&__pyx_v_end_a), (&__pyx_v_start_b), (&__pyx_v_end_b));

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":377
 *                 &start_a,&end_a,
 *                 &start_b,&end_b)
 *     return (start_a,end_a,start_b,end_b)             # <<<<<<<<<<<<<<
 *   def __len__(self):
 *     return cl_max_alg(self.att)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_start_a); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_end_a); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyInt_FromLong(__pyx_v_start_b); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyInt_FromLong(__pyx_v_end_b); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("CWB.CL.AlignAttrib.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":378
 *                 &start_b,&end_b)
 *     return (start_a,end_a,start_b,end_b)
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return cl_max_alg(self.att)
 * 
 */

static Py_ssize_t __pyx_pf_3CWB_2CL_11AlignAttrib___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_3CWB_2CL_11AlignAttrib___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":379
 *     return (start_a,end_a,start_b,end_b)
 *   def __len__(self):
 *     return cl_max_alg(self.att)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cl_max_alg(((struct __pyx_obj_3CWB_2CL_AlignAttrib *)__pyx_v_self)->att);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":382
 * 
 * 
 * def test():             # <<<<<<<<<<<<<<
 *     cdef Corpus corpus
 *     cdef c_Attribute *att
 */

static PyObject *__pyx_pf_3CWB_2CL_test(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3CWB_2CL_test(PyObject *__pyx_self, PyObject *unused) {
  struct __pyx_obj_3CWB_2CL_Corpus *__pyx_v_corpus;
  PyObject *__pyx_v_attr;
  PyObject *__pyx_v_attr2;
  PyObject *__pyx_v_rng;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("test");
  __pyx_self = __pyx_self;
  __pyx_v_corpus = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_attr = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_attr2 = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_rng = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":386
 *     cdef c_Attribute *att
 *     cdef int i
 *     corpus=Corpus("FEMME")             # <<<<<<<<<<<<<<
 *     print repr(corpus)
 *     print corpus.get_P_attributes()
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__FEMME));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__FEMME));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__FEMME));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_Corpus)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_corpus));
  __pyx_v_corpus = ((struct __pyx_obj_3CWB_2CL_Corpus *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":387
 *     cdef int i
 *     corpus=Corpus("FEMME")
 *     print repr(corpus)             # <<<<<<<<<<<<<<
 *     print corpus.get_P_attributes()
 *     print corpus.get_S_attributes()
 */
  __pyx_t_2 = PyObject_Repr(((PyObject *)__pyx_v_corpus)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PrintOne(__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":388
 *     corpus=Corpus("FEMME")
 *     print repr(corpus)
 *     print corpus.get_P_attributes()             # <<<<<<<<<<<<<<
 *     print corpus.get_S_attributes()
 *     attr=corpus["word"]
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_corpus), __pyx_n_s__get_P_attributes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":389
 *     print repr(corpus)
 *     print corpus.get_P_attributes()
 *     print corpus.get_S_attributes()             # <<<<<<<<<<<<<<
 *     attr=corpus["word"]
 *     print attr[0:4]
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_corpus), __pyx_n_s__get_S_attributes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":390
 *     print corpus.get_P_attributes()
 *     print corpus.get_S_attributes()
 *     attr=corpus["word"]             # <<<<<<<<<<<<<<
 *     print attr[0:4]
 *     attr2=AttStruc(corpus,"s")
 */
  __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_corpus), ((PyObject *)__pyx_n_s__word)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_attr);
  __pyx_v_attr = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":391
 *     print corpus.get_S_attributes()
 *     attr=corpus["word"]
 *     print attr[0:4]             # <<<<<<<<<<<<<<
 *     attr2=AttStruc(corpus,"s")
 *     print len(attr2), attr2[23]
 */
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_attr, 0, 4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PrintOne(__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":392
 *     attr=corpus["word"]
 *     print attr[0:4]
 *     attr2=AttStruc(corpus,"s")             # <<<<<<<<<<<<<<
 *     print len(attr2), attr2[23]
 *     rng=attr2[23]
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_corpus));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_corpus));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_corpus));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__s));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__s));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__s));
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3CWB_2CL_AttStruc)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_attr2);
  __pyx_v_attr2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":393
 *     print attr[0:4]
 *     attr2=AttStruc(corpus,"s")
 *     print len(attr2), attr2[23]             # <<<<<<<<<<<<<<
 *     rng=attr2[23]
 *     print attr[rng[0]:rng[1]]
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_attr2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_attr2, 23, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (__Pyx_Print(__pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":394
 *     attr2=AttStruc(corpus,"s")
 *     print len(attr2), attr2[23]
 *     rng=attr2[23]             # <<<<<<<<<<<<<<
 *     print attr[rng[0]:rng[1]]
 *     print list(attr.find("femme"))
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_attr2, 23, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_v_rng);
  __pyx_v_rng = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":395
 *     print len(attr2), attr2[23]
 *     rng=attr2[23]
 *     print attr[rng[0]:rng[1]]             # <<<<<<<<<<<<<<
 *     print list(attr.find("femme"))
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_rng, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_rng, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_GetSlice(__pyx_v_attr, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PrintOne(__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":396
 *     rng=attr2[23]
 *     print attr[rng[0]:rng[1]]
 *     print list(attr.find("femme"))             # <<<<<<<<<<<<<<
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_attr, __pyx_n_s__find); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__femme));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__femme));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__femme));
  __pyx_t_1 = PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)&PyList_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CWB.CL.test");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_corpus);
  __Pyx_DECREF(__pyx_v_attr);
  __Pyx_DECREF(__pyx_v_attr2);
  __Pyx_DECREF(__pyx_v_rng);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3CWB_2CL_PosAttrib __pyx_vtable_3CWB_2CL_PosAttrib;

static PyObject *__pyx_tp_new_3CWB_2CL_PosAttrib(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_PosAttrib *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_PosAttrib *)o);
  p->__pyx_vtab = __pyx_vtabptr_3CWB_2CL_PosAttrib;
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  p->attname = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_3CWB_2CL_9PosAttrib___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_PosAttrib(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_PosAttrib *p = (struct __pyx_obj_3CWB_2CL_PosAttrib *)o;
  Py_XDECREF(((PyObject *)p->parent));
  Py_XDECREF(p->attname);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3CWB_2CL_PosAttrib(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3CWB_2CL_PosAttrib *p = (struct __pyx_obj_3CWB_2CL_PosAttrib *)o;
  if (p->parent) {
    e = (*v)(((PyObject*)p->parent), a); if (e) return e;
  }
  if (p->attname) {
    e = (*v)(p->attname, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3CWB_2CL_PosAttrib(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_PosAttrib *p = (struct __pyx_obj_3CWB_2CL_PosAttrib *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->attname);
  p->attname = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_3CWB_2CL_PosAttrib(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_PosAttrib[] = {
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDictionary"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_getDictionary, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("cpos2id"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_cpos2id, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_find, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_list"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_find_list, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_pattern"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_find_pattern, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("frequency"), (PyCFunction)__pyx_pf_3CWB_2CL_9PosAttrib_frequency, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PosAttrib = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PosAttrib = {
  __pyx_pf_3CWB_2CL_9PosAttrib___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3CWB_2CL_PosAttrib, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PosAttrib = {
  __pyx_pf_3CWB_2CL_9PosAttrib___len__, /*mp_length*/
  __pyx_pf_3CWB_2CL_9PosAttrib___getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PosAttrib = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_PosAttrib = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.PosAttrib"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_PosAttrib), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_PosAttrib, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_3CWB_2CL_9PosAttrib___repr__, /*tp_repr*/
  &__pyx_tp_as_number_PosAttrib, /*tp_as_number*/
  &__pyx_tp_as_sequence_PosAttrib, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PosAttrib, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PosAttrib, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3CWB_2CL_PosAttrib, /*tp_traverse*/
  __pyx_tp_clear_3CWB_2CL_PosAttrib, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_PosAttrib, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_PosAttrib, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_3CWB_2CL_AttStruc(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_AttStruc *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_AttStruc *)o);
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  p->attname = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_3CWB_2CL_8AttStruc___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_AttStruc(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AttStruc *p = (struct __pyx_obj_3CWB_2CL_AttStruc *)o;
  Py_XDECREF(((PyObject *)p->parent));
  Py_XDECREF(p->attname);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3CWB_2CL_AttStruc(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3CWB_2CL_AttStruc *p = (struct __pyx_obj_3CWB_2CL_AttStruc *)o;
  if (p->parent) {
    e = (*v)(((PyObject*)p->parent), a); if (e) return e;
  }
  if (p->attname) {
    e = (*v)(p->attname, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3CWB_2CL_AttStruc(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AttStruc *p = (struct __pyx_obj_3CWB_2CL_AttStruc *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->attname);
  p->attname = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_3CWB_2CL_AttStruc(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_AttStruc[] = {
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc_getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_all"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc_find_all, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_pos"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc_find_pos, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("cpos2struc"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc_cpos2struc, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("map_idlist"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc_map_idlist, METH_O, __Pyx_DOCSTR(__pyx_doc_3CWB_2CL_8AttStruc_map_idlist)},
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_3CWB_2CL_8AttStruc___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_AttStruc = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_AttStruc = {
  __pyx_pf_3CWB_2CL_8AttStruc___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3CWB_2CL_AttStruc, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AttStruc = {
  __pyx_pf_3CWB_2CL_8AttStruc___len__, /*mp_length*/
  __pyx_pf_3CWB_2CL_8AttStruc___getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_AttStruc = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_AttStruc = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.AttStruc"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_AttStruc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_AttStruc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_3CWB_2CL_8AttStruc___repr__, /*tp_repr*/
  &__pyx_tp_as_number_AttStruc, /*tp_as_number*/
  &__pyx_tp_as_sequence_AttStruc, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AttStruc, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_AttStruc, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3CWB_2CL_AttStruc, /*tp_traverse*/
  __pyx_tp_clear_3CWB_2CL_AttStruc, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_AttStruc, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_AttStruc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_3CWB_2CL_AlignAttrib(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_AlignAttrib *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_AlignAttrib *)o);
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  p->attname = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_3CWB_2CL_11AlignAttrib___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_AlignAttrib(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AlignAttrib *p = (struct __pyx_obj_3CWB_2CL_AlignAttrib *)o;
  Py_XDECREF(((PyObject *)p->parent));
  Py_XDECREF(p->attname);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3CWB_2CL_AlignAttrib(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3CWB_2CL_AlignAttrib *p = (struct __pyx_obj_3CWB_2CL_AlignAttrib *)o;
  if (p->parent) {
    e = (*v)(((PyObject*)p->parent), a); if (e) return e;
  }
  if (p->attname) {
    e = (*v)(p->attname, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3CWB_2CL_AlignAttrib(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AlignAttrib *p = (struct __pyx_obj_3CWB_2CL_AlignAttrib *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_3CWB_2CL_Corpus *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->attname);
  p->attname = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_3CWB_2CL_AlignAttrib(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_AlignAttrib[] = {
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_3CWB_2CL_11AlignAttrib___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_3CWB_2CL_11AlignAttrib_getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("cpos2alg"), (PyCFunction)__pyx_pf_3CWB_2CL_11AlignAttrib_cpos2alg, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_3CWB_2CL_11AlignAttrib___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_AlignAttrib = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_AlignAttrib = {
  __pyx_pf_3CWB_2CL_11AlignAttrib___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3CWB_2CL_AlignAttrib, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AlignAttrib = {
  __pyx_pf_3CWB_2CL_11AlignAttrib___len__, /*mp_length*/
  __pyx_pf_3CWB_2CL_11AlignAttrib___getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_AlignAttrib = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_AlignAttrib = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.AlignAttrib"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_AlignAttrib), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_AlignAttrib, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_3CWB_2CL_11AlignAttrib___repr__, /*tp_repr*/
  &__pyx_tp_as_number_AlignAttrib, /*tp_as_number*/
  &__pyx_tp_as_sequence_AlignAttrib, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AlignAttrib, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_AlignAttrib, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3CWB_2CL_AlignAttrib, /*tp_traverse*/
  __pyx_tp_clear_3CWB_2CL_AlignAttrib, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_AlignAttrib, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_AlignAttrib, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_3CWB_2CL_Corpus __pyx_vtable_3CWB_2CL_Corpus;

static PyObject *__pyx_tp_new_3CWB_2CL_Corpus(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_Corpus *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_Corpus *)o);
  p->__pyx_vtab = __pyx_vtabptr_3CWB_2CL_Corpus;
  p->name = Py_None; Py_INCREF(Py_None);
  p->charset_decoder = Py_None; Py_INCREF(Py_None);
  p->charset_encoder = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_3CWB_2CL_6Corpus___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_Corpus(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_Corpus *p = (struct __pyx_obj_3CWB_2CL_Corpus *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_3CWB_2CL_6Corpus___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(p->name);
  Py_XDECREF(p->charset_decoder);
  Py_XDECREF(p->charset_encoder);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3CWB_2CL_Corpus(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3CWB_2CL_Corpus *p = (struct __pyx_obj_3CWB_2CL_Corpus *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  if (p->charset_decoder) {
    e = (*v)(p->charset_decoder, a); if (e) return e;
  }
  if (p->charset_encoder) {
    e = (*v)(p->charset_encoder, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3CWB_2CL_Corpus(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_Corpus *p = (struct __pyx_obj_3CWB_2CL_Corpus *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->charset_decoder);
  p->charset_decoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->charset_encoder);
  p->charset_encoder = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_Corpus[] = {
  {__Pyx_NAMESTR("to_str"), (PyCFunction)__pyx_pf_3CWB_2CL_6Corpus_to_str, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("to_unicode"), (PyCFunction)__pyx_pf_3CWB_2CL_6Corpus_to_unicode, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_3CWB_2CL_6Corpus___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("attribute"), (PyCFunction)__pyx_pf_3CWB_2CL_6Corpus_attribute, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Corpus = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Corpus = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Corpus = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Corpus = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_Corpus = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.Corpus"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_Corpus), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_Corpus, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_3CWB_2CL_6Corpus___repr__, /*tp_repr*/
  &__pyx_tp_as_number_Corpus, /*tp_as_number*/
  &__pyx_tp_as_sequence_Corpus, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Corpus, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Corpus, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3CWB_2CL_Corpus, /*tp_traverse*/
  __pyx_tp_clear_3CWB_2CL_Corpus, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_Corpus, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_Corpus, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_3CWB_2CL_IDList __pyx_vtable_3CWB_2CL_IDList;

static PyObject *__pyx_tp_new_3CWB_2CL_IDList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_IDList *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_IDList *)o);
  p->__pyx_vtab = __pyx_vtabptr_3CWB_2CL_IDList;
  if (__pyx_pf_3CWB_2CL_6IDList___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_IDList(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_3CWB_2CL_6IDList___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_3CWB_2CL_IDList(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_IDList[] = {
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_3CWB_2CL_6IDList___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__and__"), (PyCFunction)__pyx_pf_3CWB_2CL_6IDList___and__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__or__"), (PyCFunction)__pyx_pf_3CWB_2CL_6IDList___or__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__sub__"), (PyCFunction)__pyx_pf_3CWB_2CL_6IDList___sub__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("join"), (PyCFunction)__pyx_pf_3CWB_2CL_6IDList_join, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_IDList = {
  0, /*nb_add*/
  __pyx_pf_3CWB_2CL_6IDList___sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pf_3CWB_2CL_6IDList___and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pf_3CWB_2CL_6IDList___or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_IDList = {
  __pyx_pf_3CWB_2CL_6IDList___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3CWB_2CL_IDList, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pf_3CWB_2CL_6IDList___contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_IDList = {
  __pyx_pf_3CWB_2CL_6IDList___len__, /*mp_length*/
  __pyx_pf_3CWB_2CL_6IDList___getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_IDList = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_IDList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.IDList"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_IDList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_IDList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_IDList, /*tp_as_number*/
  &__pyx_tp_as_sequence_IDList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_IDList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_IDList, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_IDList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_IDList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_3CWB_2CL_AttrDictionary(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3CWB_2CL_AttrDictionary *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3CWB_2CL_AttrDictionary *)o);
  p->attr = ((struct __pyx_obj_3CWB_2CL_PosAttrib *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_3CWB_2CL_14AttrDictionary___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3CWB_2CL_AttrDictionary(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AttrDictionary *p = (struct __pyx_obj_3CWB_2CL_AttrDictionary *)o;
  Py_XDECREF(((PyObject *)p->attr));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3CWB_2CL_AttrDictionary(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3CWB_2CL_AttrDictionary *p = (struct __pyx_obj_3CWB_2CL_AttrDictionary *)o;
  if (p->attr) {
    e = (*v)(((PyObject*)p->attr), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3CWB_2CL_AttrDictionary(PyObject *o) {
  struct __pyx_obj_3CWB_2CL_AttrDictionary *p = (struct __pyx_obj_3CWB_2CL_AttrDictionary *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->attr);
  p->attr = ((struct __pyx_obj_3CWB_2CL_PosAttrib *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_3CWB_2CL_AttrDictionary(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static struct PyMethodDef __pyx_methods_3CWB_2CL_AttrDictionary[] = {
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_3CWB_2CL_14AttrDictionary___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_word"), (PyCFunction)__pyx_pf_3CWB_2CL_14AttrDictionary_get_word, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_matching"), (PyCFunction)__pyx_pf_3CWB_2CL_14AttrDictionary_get_matching, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("expand_pattern"), (PyCFunction)__pyx_pf_3CWB_2CL_14AttrDictionary_expand_pattern, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_AttrDictionary = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_AttrDictionary = {
  __pyx_pf_3CWB_2CL_14AttrDictionary___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3CWB_2CL_AttrDictionary, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AttrDictionary = {
  __pyx_pf_3CWB_2CL_14AttrDictionary___len__, /*mp_length*/
  __pyx_pf_3CWB_2CL_14AttrDictionary___getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_AttrDictionary = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_3CWB_2CL_AttrDictionary = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CWB.CL.AttrDictionary"), /*tp_name*/
  sizeof(struct __pyx_obj_3CWB_2CL_AttrDictionary), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3CWB_2CL_AttrDictionary, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_AttrDictionary, /*tp_as_number*/
  &__pyx_tp_as_sequence_AttrDictionary, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AttrDictionary, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_AttrDictionary, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3CWB_2CL_AttrDictionary, /*tp_traverse*/
  __pyx_tp_clear_3CWB_2CL_AttrDictionary, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3CWB_2CL_AttrDictionary, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3CWB_2CL_AttrDictionary, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static struct PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("test"), (PyCFunction)__pyx_pf_3CWB_2CL_test, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("CL"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__FEMME, __pyx_k__FEMME, sizeof(__pyx_k__FEMME), 0, 0, 1, 1},
  {&__pyx_n_s__IndexError, __pyx_k__IndexError, sizeof(__pyx_k__IndexError), 0, 0, 1, 1},
  {&__pyx_n_s__KeyError, __pyx_k__KeyError, sizeof(__pyx_k__KeyError), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__att, __pyx_k__att, sizeof(__pyx_k__att), 0, 0, 1, 1},
  {&__pyx_n_s__attname, __pyx_k__attname, sizeof(__pyx_k__attname), 0, 0, 1, 1},
  {&__pyx_n_s__attr, __pyx_k__attr, sizeof(__pyx_k__attr), 0, 0, 1, 1},
  {&__pyx_n_s__atype, __pyx_k__atype, sizeof(__pyx_k__atype), 0, 0, 1, 1},
  {&__pyx_n_s__charset_decoder, __pyx_k__charset_decoder, sizeof(__pyx_k__charset_decoder), 0, 0, 1, 1},
  {&__pyx_n_s__charset_encoder, __pyx_k__charset_encoder, sizeof(__pyx_k__charset_encoder), 0, 0, 1, 1},
  {&__pyx_n_s__cname, __pyx_k__cname, sizeof(__pyx_k__cname), 0, 0, 1, 1},
  {&__pyx_n_s__codecs, __pyx_k__codecs, sizeof(__pyx_k__codecs), 0, 0, 1, 1},
  {&__pyx_n_s__corpus, __pyx_k__corpus, sizeof(__pyx_k__corpus), 0, 0, 1, 1},
  {&__pyx_n_s__cpos2id, __pyx_k__cpos2id, sizeof(__pyx_k__cpos2id), 0, 0, 1, 1},
  {&__pyx_n_s__d, __pyx_k__d, sizeof(__pyx_k__d), 0, 0, 1, 1},
  {&__pyx_n_s__encoding, __pyx_k__encoding, sizeof(__pyx_k__encoding), 0, 0, 1, 1},
  {&__pyx_n_s__femme, __pyx_k__femme, sizeof(__pyx_k__femme), 0, 0, 1, 1},
  {&__pyx_n_s__find, __pyx_k__find, sizeof(__pyx_k__find), 0, 0, 1, 1},
  {&__pyx_n_s__flags, __pyx_k__flags, sizeof(__pyx_k__flags), 0, 0, 1, 1},
  {&__pyx_n_s__get_P_attributes, __pyx_k__get_P_attributes, sizeof(__pyx_k__get_P_attributes), 0, 0, 1, 1},
  {&__pyx_n_s__get_S_attributes, __pyx_k__get_S_attributes, sizeof(__pyx_k__get_S_attributes), 0, 0, 1, 1},
  {&__pyx_n_s__get_matching, __pyx_k__get_matching, sizeof(__pyx_k__get_matching), 0, 0, 1, 1},
  {&__pyx_n_s__getdecoder, __pyx_k__getdecoder, sizeof(__pyx_k__getdecoder), 0, 0, 1, 1},
  {&__pyx_n_s__getencoder, __pyx_k__getencoder, sizeof(__pyx_k__getencoder), 0, 0, 1, 1},
  {&__pyx_n_s__has_values, __pyx_k__has_values, sizeof(__pyx_k__has_values), 0, 0, 1, 1},
  {&__pyx_n_s__ids, __pyx_k__ids, sizeof(__pyx_k__ids), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__length, __pyx_k__length, sizeof(__pyx_k__length), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__offset, __pyx_k__offset, sizeof(__pyx_k__offset), 0, 0, 1, 1},
  {&__pyx_n_s__other, __pyx_k__other, sizeof(__pyx_k__other), 0, 0, 1, 1},
  {&__pyx_n_s__p, __pyx_k__p, sizeof(__pyx_k__p), 0, 0, 1, 1},
  {&__pyx_n_s__parent, __pyx_k__parent, sizeof(__pyx_k__parent), 0, 0, 1, 1},
  {&__pyx_n_s__pat, __pyx_k__pat, sizeof(__pyx_k__pat), 0, 0, 1, 1},
  {&__pyx_n_s__registry_dir, __pyx_k__registry_dir, sizeof(__pyx_k__registry_dir), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__seq, __pyx_k__seq, sizeof(__pyx_k__seq), 0, 0, 1, 1},
  {&__pyx_n_s__sorted, __pyx_k__sorted, sizeof(__pyx_k__sorted), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__stop, __pyx_k__stop, sizeof(__pyx_k__stop), 0, 0, 1, 1},
  {&__pyx_n_s__to_str, __pyx_k__to_str, sizeof(__pyx_k__to_str), 0, 0, 1, 1},
  {&__pyx_n_s__to_unicode, __pyx_k__to_unicode, sizeof(__pyx_k__to_unicode), 0, 0, 1, 1},
  {&__pyx_n_s__word, __pyx_k__word, sizeof(__pyx_k__word), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_KeyError = __Pyx_GetName(__pyx_b, __pyx_n_s__KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetName(__pyx_b, __pyx_n_s__sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetName(__pyx_b, __pyx_n_s__IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initCL(void); /*proto*/
PyMODINIT_FUNC initCL(void)
#else
PyMODINIT_FUNC PyInit_CL(void); /*proto*/
PyMODINIT_FUNC PyInit_CL(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_CL(void)", __LINE__, __FILE__);
  #endif
  __pyx_init_filenames();
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3
  __pyx_empty_bytes = PyString_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("CL"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_CWB__CL) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  registry = Py_None; Py_INCREF(Py_None);
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_3CWB_2CL_PosAttrib = &__pyx_vtable_3CWB_2CL_PosAttrib;
  #if PY_MAJOR_VERSION >= 3
  __pyx_vtable_3CWB_2CL_PosAttrib.cpos2id = (PyObject *(*)(struct __pyx_obj_3CWB_2CL_PosAttrib *, int, int __pyx_skip_dispatch))__pyx_f_3CWB_2CL_9PosAttrib_cpos2id;
  #else
  *(void(**)(void))&__pyx_vtable_3CWB_2CL_PosAttrib.cpos2id = (void(*)(void))__pyx_f_3CWB_2CL_9PosAttrib_cpos2id;
  #endif
  if (PyType_Ready(&__pyx_type_3CWB_2CL_PosAttrib) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_3CWB_2CL_PosAttrib.tp_dict, __pyx_vtabptr_3CWB_2CL_PosAttrib) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PosAttrib", (PyObject *)&__pyx_type_3CWB_2CL_PosAttrib) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_PosAttrib = &__pyx_type_3CWB_2CL_PosAttrib;
  if (PyType_Ready(&__pyx_type_3CWB_2CL_AttStruc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "AttStruc", (PyObject *)&__pyx_type_3CWB_2CL_AttStruc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_AttStruc = &__pyx_type_3CWB_2CL_AttStruc;
  if (PyType_Ready(&__pyx_type_3CWB_2CL_AlignAttrib) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "AlignAttrib", (PyObject *)&__pyx_type_3CWB_2CL_AlignAttrib) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_AlignAttrib = &__pyx_type_3CWB_2CL_AlignAttrib;
  __pyx_vtabptr_3CWB_2CL_Corpus = &__pyx_vtable_3CWB_2CL_Corpus;
  #if PY_MAJOR_VERSION >= 3
  __pyx_vtable_3CWB_2CL_Corpus.to_str = (PyObject *(*)(struct __pyx_obj_3CWB_2CL_Corpus *, PyObject *, int __pyx_skip_dispatch))__pyx_f_3CWB_2CL_6Corpus_to_str;
  __pyx_vtable_3CWB_2CL_Corpus.to_unicode = (PyObject *(*)(struct __pyx_obj_3CWB_2CL_Corpus *, PyObject *, int __pyx_skip_dispatch))__pyx_f_3CWB_2CL_6Corpus_to_unicode;
  #else
  *(void(**)(void))&__pyx_vtable_3CWB_2CL_Corpus.to_str = (void(*)(void))__pyx_f_3CWB_2CL_6Corpus_to_str;
  *(void(**)(void))&__pyx_vtable_3CWB_2CL_Corpus.to_unicode = (void(*)(void))__pyx_f_3CWB_2CL_6Corpus_to_unicode;
  #endif
  if (PyType_Ready(&__pyx_type_3CWB_2CL_Corpus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_3CWB_2CL_Corpus.tp_dict, __pyx_vtabptr_3CWB_2CL_Corpus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Corpus", (PyObject *)&__pyx_type_3CWB_2CL_Corpus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_Corpus = &__pyx_type_3CWB_2CL_Corpus;
  __pyx_vtabptr_3CWB_2CL_IDList = &__pyx_vtable_3CWB_2CL_IDList;
  #if PY_MAJOR_VERSION >= 3
  __pyx_vtable_3CWB_2CL_IDList.join = (struct __pyx_obj_3CWB_2CL_IDList *(*)(struct __pyx_obj_3CWB_2CL_IDList *, struct __pyx_obj_3CWB_2CL_IDList *, int, int __pyx_skip_dispatch))__pyx_f_3CWB_2CL_6IDList_join;
  #else
  *(void(**)(void))&__pyx_vtable_3CWB_2CL_IDList.join = (void(*)(void))__pyx_f_3CWB_2CL_6IDList_join;
  #endif
  if (PyType_Ready(&__pyx_type_3CWB_2CL_IDList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_3CWB_2CL_IDList.tp_dict, __pyx_vtabptr_3CWB_2CL_IDList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "IDList", (PyObject *)&__pyx_type_3CWB_2CL_IDList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_IDList = &__pyx_type_3CWB_2CL_IDList;
  if (PyType_Ready(&__pyx_type_3CWB_2CL_AttrDictionary) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "AttrDictionary", (PyObject *)&__pyx_type_3CWB_2CL_AttrDictionary) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3CWB_2CL_AttrDictionary = &__pyx_type_3CWB_2CL_AttrDictionary;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":1
 * import codecs             # <<<<<<<<<<<<<<
 * 
 * cdef public object registry
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__codecs), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__codecs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/yannickv/proj/cwb-python/src/CWB/CL.pyx":5
 * cdef public object registry
 * 
 * registry="/usr/local/share/cwb/registry/"             # <<<<<<<<<<<<<<
 * 
 * cdef class PosAttrib
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_9));
  __Pyx_GOTREF(registry);
  __Pyx_DECREF(registry);
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_9));
  registry = ((PyObject *)__pyx_kp_s_9);

  /* "src/CWB/CL.pxd":1
 * cdef extern from "stdlib.h":             # <<<<<<<<<<<<<<
 *   void *malloc(int size)
 *   void free(void *)
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init CWB.CL");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CWB.CL");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "CL.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(__import__,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject *arg_tuple, int newline) {
    PyObject *f;
    PyObject* v;
    int i;

    if (!(f = __Pyx_GetStdout()))
        return -1;
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (!__pyx_print) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (!newline) {
        if (!__pyx_print_kwargs) {
            __pyx_print_kwargs = PyDict_New();
            if (!__pyx_print_kwargs)
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (!end_string)
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject *o) {
    PyObject *f;
    if (!(f = __Pyx_GetStdout()))
        return -1;
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX < 0x03010000
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#else
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
